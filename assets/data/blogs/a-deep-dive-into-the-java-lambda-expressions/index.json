{"hash":"b0767e79434fd655b2c10898796d908cfc5a291d","data":{"blog":{"title":"A deep dive into the Java lambda expressions","path":"/blogs/a-deep-dive-into-the-java-lambda-expressions/","image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.872e63c.94aa1ac622d921496a0d91e818bd4f74.png","size":{"width":1600,"height":800},"sizes":"(max-width: 1600px) 100vw, 1600px","srcset":["/assets/static/cover.bb17b12.94aa1ac622d921496a0d91e818bd4f74.png 480w","/assets/static/cover.b28baf0.94aa1ac622d921496a0d91e818bd4f74.png 1024w","/assets/static/cover.872e63c.94aa1ac622d921496a0d91e818bd4f74.png 1600w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1600 800' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-3d91e583b689239ac83b1ec9e27e6489'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-3d91e583b689239ac83b1ec9e27e6489)' width='1600' height='800' xlink:href='data:image/png%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAgAEADASIAAhEBAxEB/8QAGQAAAwEBAQAAAAAAAAAAAAAAAAQGBQID/8QAKxAAAgIBAwMEAQMFAAAAAAAAAQIDEQQABSESEzEGQVFhIjJxgRRScpHh/8QAGAEBAQEBAQAAAAAAAAAAAAAAAAMBBAb/xAAjEQACAQIFBQEAAAAAAAAAAAAAAQIRIQMEEzGhEjJRgbHw/9oADAMBAAIRAxEAPwDa9If0%2bPtWNhYu4xu8Ezy5CwxuHYoA4HWo4RjxZNcCx5GpfffU274sKbccZ9pykCtL2pmDMeTZH8/J4r5vSe6ZQh9H7JBiKsRyllOW8YozGOQqit80Dde9gm9TpZpWQO3gBAWNAAcAfsNVoe/wcsnJzle74f7gcz93z8%2bMJl5LyJdkUF6z/c1AdR%2bzzpDVNlyeneskRT2Xc9xEIQ8igBfIFk8V4HzpZZdjbKJYSLjLOzrH2yS6FVoXdiiD/vQ6I4iStFr0YWjVFFmbCry9OH0r0Mqu6u/kUCw6v38VzVaMnJ9PviSxwwyq4D9oFD1BiBXU3VyQQfaqPzobquvayd0aNMwYry4mTkfpjgC2SOCxIAW/nyf4OtKtpbnc2X1bZjYaAhY3eV7H6nPAN/4gDSejRoEktjfwd5xUgwocvE7yQp2j1UQLcsXArzRIrXbb7iBnCbbCylGUM6ISxJH5EUB4Ff8AdTujWEtCFalG2/YZDAbfRY2GHRa/YFUTfi/HjnzpfL3jGyMbJiXb4oe4Kj7YUdsfjxdXVgn7vWJpjGwsrKWRsXGnmWMdTmOMt0j5NaDShG54AEngE%2b/GqHY8N5vS3qKeQXBHHEYwfeUSCyv2ELXXs3OuvTmz7p25txxIcM9lHBjzPDAiiOluD59z9/B1XepcTa02h8iWDKOHgzLFGsRRYWYWsqKFANFq/K745HBGlSGPmF1KC8r7sf/Z' /%3e%3c/svg%3e"},"image_caption":"A deep dive into the Java lambda expressions","excerpt":"Lambda expressions are introduced in java8 version.Let us look about Lamda expressions in detail.","content":"<p>In this article, you will learn about what exactly lambda expressions and how to use it in java.</p>\n<p><strong>Prerequisites:</strong></p>\n<ol>\n<li>Knowledge in java</li>\n</ol>\n<h3 id=\"introduction\"><a href=\"#introduction\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Introduction:</h3>\n<p>Lambda expressions are introduced in java8 version. While java introducing this feature, It’s new for java. Not for other languages.</p>\n<h3 id=\"before-lambda-expressions\"><a href=\"#before-lambda-expressions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Before lambda expressions:</h3>\n<p>Before jumping into the lambda expression, we need to know what’s the problem java developers faced before introducing the lambda expressions.</p>\n<h4 id=\"example-1\"><a href=\"#example-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Example 1:</h4>\n<p>Let’s take an example of creating thread before lambda expressions are introduced.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRunnable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am executed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BeforeLambda</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token class-name\">Runnable</span> runnableObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyRunnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>runnableObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The internal implementation of Runnable is </p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang</span><span class=\"token punctuation\">;</span>\n<span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Don’t worry about <strong><em>@FunctionalInterface</em></strong> for now, we will see what is the use of FunctionalInterface in this article.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 770 131' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-3147fdd66d803b6d9c70798a2d7e5070'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-3147fdd66d803b6d9c70798a2d7e5070)' width='770' height='131' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAALCAYAAADP9otxAAAACXBIWXMAABJ0AAASdAHeZh94AAADlUlEQVRIx6VW2XbaSBD1N%2bfkK/IDmd/Iy7xmsccniYkhXrDDJoTQigRa0a47VS2EBYTYOH1O04tq61u3qzmrqgpxkiLPC6RZjrKswI3391uzl6YpgiA4KndMrypL0s3IT4Ysz4VPHjPyu44TWudiXdVKQqcoCiSkw2NRlFt71TEfNLI97jnp1NvVzne21czPePIwnKL/a4L%2bSIHjPh2srdSe7zt9CQCNrG7a5E/Gw0iGatiQZBUPAwl3QwW/BhMohrNjOyOwpJmG24cxZtriaDztPc/z8TiaYijrKMrd778FgBtnnjfKsjxQONZPZQDbbnohskP%2bOKCNz0J82w%2b4RM3SbBvbcwliuZpdRSO9E0/7jAKAhOgXRdEWmZe2lzJgN1M1AM0ouqB3QfNiu9fWa9YNcO04n2Vk9ZRYtt/OPrczFnB9H0t3hd7PHi6%2bfMK3r1e4uuqg86OD7nUHXy/P8fH8Evd39%2bj1uvj8%2bRNMa3ESAxo5d%2blAUeawbRvKbIYZ9cl4iLmmQ5ImGA4GkGcKQkpIVdaBG0b9bUJdUzXSkaHM1T%2bycts3IKxWK0xJn323ZQQDUi9EQHefi0ZOdy5JEnH3omgtCl6SxIjWa8RxTGyJBVsSKpyvAaAo8if6bzJaM2I3S81%2bk/ksS0V8jWzRYskxVla/ufttBmwB%2bPf9P3jz9h1kQvXupod%2b/xHD0RjSVMJ4NED//hY3tCfLU4HiaCyJSn5qIeQW0uuxWNgiI4ZhwDJNYoJMjLKhqnPMZBm6YQrgGz1dU6HpBkxDhUW6M2KIpmuwLAuO48AgG2yv9rHHhA0DPM%2bDRnYM0zoE4Pb6Bh8%2bduEsl5hTMIZuUjAqUZEDs4h2ClVr6pJEIMgEzPQkBrTl1lEogmGW8VPqui6NvqC8T1eR174fCLY12fI9F7azFGMQRkKfD%2bzS6FNf0px1%2bRndqTetgzKjWY9t7wDAP5zNJF7DsRf0TBmUAR1RGIoAbdpbUVBpHAmHQRD%2bVRFM6eAcRLQ5cMD1h7LIey7VodVyJZ6xokX/NV2/cAMWj3zomOw8ewU2DOCRbXieewgALxjNBRUleTrBxeV/6Ha76HU6VPB6OL%2b4oOL4E4/9O/y47uL79yvxp2X/br8UAI8OyZT16OAmg63rguIL26FRE4WRr0AYRttawUlQFEWw0qLia1KC%2bEo89zS390JKaH0FzEMAXtNOyf5rdU75j/EHiQOZ9vp/W/i1ZU5LFPgAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"770\" alt=\"A deep dive into the Java lambda expressions - Image 1\" data-srcset=\"/assets/static/BeforeLambda.061cc64.91609ce9b05574c0785377676153e207.png 770w\" data-sizes=\"(max-width: 770px) 100vw, 770px\" data-src=\"/assets/static/BeforeLambda.061cc64.91609ce9b05574c0785377676153e207.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/BeforeLambda.061cc64.91609ce9b05574c0785377676153e207.png\" width=\"770\" alt=\"A deep dive into the Java lambda expressions - Image 1\"></noscript></p>\n<p>Now compiling this code, the Java compiler will generate below two class files.</p>\n<p>Now let’s reduce this code using an anonymous inner class.</p>\n<h4 id=\"example-2\"><a href=\"#example-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Example 2:</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BeforeLambda2</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token class-name\">Runnable</span> runnableObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am executed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>runnableObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Now Let’s compile this code and see how Java compiler-generated class files,</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 746 132' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-4c8243ec766a3f1e12aa02d70fe90b1a'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-4c8243ec766a3f1e12aa02d70fe90b1a)' width='746' height='132' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAALCAYAAADP9otxAAAACXBIWXMAABJ0AAASdAHeZh94AAADx0lEQVRIx5VW2XLqRhD1Vyd5T%2bUP8jmpSjmJl5jLZmNf9kWAJLQhCe3bSfcgcQUBjKdqakYzPb2e7tZdEIRwvQBBGMGnfV4U4FGUa31UZ1EUIU3Ti3SX3hV5LmQ4Ox%2beHxCfWMgNad3aLmzXp/voSIeiyLEj/Tw/FLQZ8Tgnd0%2b7n3meiTc8ozg5uueRE4%2b85HNnb2289qcYzlYYjCWkWf4/hqfzVOhnjqi/tR0XH8M5ejRVVcdwLmM0X2M0meN9JIn9sZEFHHeH1tsQg8kScZKelX3sgBwb3cTb9wlkzbrugE9Ch1vGZyioC/7KqIzZvy2uo6u2nsq5hBbhACa2bQdhEAhYR3EsGGRZthdMK5/zWZomCIguO9wXV1PmkhPSkidP5hOTzCRJxDevPLPshxFMkwn5e/r9zA8BOofCU8QWpVzmndcQdsdM17IKS5Pxx5/3eHr%2bhtdOC/88PKDTbuHp5RvarQbu//qb9v/i8fER49EYreYLHh6fYZHzbk0BHo5jY7VaQd1ssJSW0DUVk%2bkM8/kCmqbTOqV7CQqlR6WoaRhY05vxeILFYgFdp9QZDuHuvKuG1%2bWmcQSd%2bAwGA1jb7Q8HsJAtHVRRqDycJDHCMBTQ48jHVPg4%2bgkXP%2bKZEL1D%2bXxrMazuszLKKKFaRZX3TFPts4wRkh0QEJe6sV75ge7G%2blOmc53/wQGskLrRYOkKnhsU7c4bJqMhrR1Mp2P0Pj4w6H%2bg0%2b3ie7%2bP5XKJNiFjRhG7tQbUaTxvR8VPhUZRVGQFlmlgQUhgvoZhUvSXUBQZhrk9vOUAaZomaGSZ7wyBBM/3z8P9THFOkwimZWE2m1Ehdo4RwO0oI4I1KcQw3KiKEMQCFXVD3zI5YwZZUQQc53PaE20VodPucM0B3EI9zxOI88mAIKCW6PlUg0Jxxg5i5PGZQEr5Zue6hDgHu91OoIb3aVmnPit4VQ2IBWodsR4cULgOfv/pVzw3%2b%2bQZmwzW4Ng2TNNEQAoaZLBlmeR1k3q1TQq4cEkZ7t23Rr9Ox0ZxKrET2JgoCkWEWTF2CO95JmW748H0TOuQXN/3SL4j6DkF2VHsNC7kVeE%2bhwBOKZ/%2bPdgGdujBATEx%2b%2bXn33DfeEez2USr/Yr%2bew8vjRd0ux10Xnt473Wp4D2h2W6jS6nRoFSZLaSbo19XxCXFGV2maRHUFRg6FcPVWpyx4RJBW5IWtLcPTrAIuks642KpbVRKIYVoJMxJB36jKmusliv68fHPtsV97YkFz%2blpCuCLo/hC///q/8K17nHjg4st8ZIu/wE2na%2bB%2bQpeMQAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"746\" alt=\"A deep dive into the Java lambda expressions - Image 2\" data-srcset=\"/assets/static/BeforeLambdaAnonmus.075226a.d4b09b100dd0e593efaa763c6d4bc671.png 746w\" data-sizes=\"(max-width: 746px) 100vw, 746px\" data-src=\"/assets/static/BeforeLambdaAnonmus.075226a.d4b09b100dd0e593efaa763c6d4bc671.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/BeforeLambdaAnonmus.075226a.d4b09b100dd0e593efaa763c6d4bc671.png\" width=\"746\" alt=\"A deep dive into the Java lambda expressions - Image 2\"></noscript></p>\n<p>Here, the Java compiler creates two class files for the main class and another for the anonymous inner class.</p>\n<h3 id=\"problems-before-lambda-expressions\"><a href=\"#problems-before-lambda-expressions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Problems before lambda expressions:</h3>\n<p>let’s analyze our anonymous inner class, Does this code has any redundant information?</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Runnable</span> runnableObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am executed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Here we are creating a reference for Runnable interface, so redundant information new Runnable() is not necessary here.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Runnable</span> runnableObj <span class=\"token operator\">=</span>̵ n̶̵̶e̶̵̶w̶̵̶ ̶<span class=\"token class-name\">R</span>̶̵̶u̶̵̶n̶̵̶n̶̵̶a̶̵̶b̶̵̶l̶̵̶e̶̵̶<span class=\"token punctuation\">(</span>̶̵̶<span class=\"token punctuation\">)</span>̶̵̶ ̶̵̶<span class=\"token punctuation\">{</span>̶̵̶\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am executed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>̶̵̶<span class=\"token punctuation\">;</span>̶̵̶</code></pre>\n<p>Here We are creating a reference for Runnable, and Runnable is an interface it only contains one method named <strong>run()</strong>. so we have the only way to provide the implementation for run() method. so redundant information public void run() is not necessary for an anonymous inner class.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Runnable</span> runnableObj <span class=\"token operator\">=</span> n̶̵̶e̶̵̶w̶̵̶ ̶<span class=\"token class-name\">R</span>̶̵̶u̶̵̶n̶̵̶n̶̵̶a̶̵̶b̶̵̶l̶̵̶e̶̵̶<span class=\"token punctuation\">(</span>̶̵̶<span class=\"token punctuation\">)</span>̶̵̶ ̶̵̶<span class=\"token punctuation\">{</span>̶̵̶\n\tp̶u̶b̶l̶i̶c̶ ̶v̶o̶i̶d̶ ̶r̶u̶n̶<span class=\"token punctuation\">(</span>̶<span class=\"token punctuation\">)</span>̶ ̶<span class=\"token punctuation\">{</span>̶\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am executed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>̵\n<span class=\"token punctuation\">}</span>̶̵̶<span class=\"token punctuation\">;</span>̶̵̶</code></pre>\n<p>Let’s see if the interface has some parameters with the return type.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">AddInterface</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span>  b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Anonymous inner class will be,</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">AddInterface</span> testObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AddInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>testObj is the reference for TestInterface, Types of parameters in the anonymous inner class are already available in the interface as well. so it’s redundant.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">AddInterface</span> testObj <span class=\"token operator\">=</span> n̶e̶w̶ ̶<span class=\"token class-name\">A</span>̶d̶d̶<span class=\"token class-name\">I</span>̶n̶t̶e̶r̶f̶a̶c̶e̶<span class=\"token punctuation\">(</span>̶<span class=\"token punctuation\">)</span>̶ ̶<span class=\"token punctuation\">{</span>̶\n      p̶u̶b̶l̶i̶c̶ ̶i̶n̶t̶ ̶a̶d̶d̶<span class=\"token punctuation\">(</span>inta<span class=\"token punctuation\">,</span>   <span class=\"token keyword\">int</span>   b  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>̶̵̶<span class=\"token punctuation\">;</span>̶̵̶</code></pre>\n<p>Also, class files are getting generating for an anonymous inner class.</p>\n<p>So Java developers consider these problems and introduced lambda expressions.</p>\n<h3 id=\"lambda-expressions\"><a href=\"#lambda-expressions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lambda expressions:</h3>\n<h4 id=\"syntax\"><a href=\"#syntax\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Syntax:</h4>\n<p><em>parameters -> expressions</em></p>\n<h4 id=\"example-1-1\"><a href=\"#example-1-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Example 1:</h4>\n<h4 id=\"before-lambda\"><a href=\"#before-lambda\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Before lambda:</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Runnable</span> runnableObj <span class=\"token operator\">=</span> n̶̵̶e̶̵̶w̶̵̶ ̶<span class=\"token class-name\">R</span>̶̵̶u̶̵̶n̶̵̶n̶̵̶a̶̵̶b̶̵̶l̶̵̶e̶̵̶<span class=\"token punctuation\">(</span>̶̵̶<span class=\"token punctuation\">)</span>̶̵̶ ̶̵̶<span class=\"token punctuation\">{</span>̶̵̶\n\tp̶u̶b̶l̶i̶c̶ ̶v̶o̶i̶d̶ ̶r̶u̶n̶<span class=\"token punctuation\">(</span>̶<span class=\"token punctuation\">)</span>̶ ̶<span class=\"token punctuation\">{</span>̶\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am executed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>̵\n<span class=\"token punctuation\">}</span>̶̵̶</code></pre>\n<h4 id=\"after-lambda\"><a href=\"#after-lambda\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>After Lambda:</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Runnable</span> runnableObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am executed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>If lambda expression contains single-line expressions, we even don’t need curly braces.</p>\n<p>so finally,</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Runnable</span> runnableObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am executed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Final code will be,</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AfterLambda</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token class-name\">Runnable</span> runnableObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am executed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>runnableObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>We can pass lambda expression directly into the Thread class parameter as well like below,</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AfterLambda</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am executed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"example-2-with-parameters\"><a href=\"#example-2-with-parameters\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Example 2 (With Parameters):</h4>\n<h4 id=\"before-lambda-1\"><a href=\"#before-lambda-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Before Lambda:</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">AddInterface</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span>  b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Anonymous inner class will be,</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">AddInterface</span> testObj <span class=\"token operator\">=</span> n̶e̶w̶ ̶<span class=\"token class-name\">A</span>̶d̶d̶<span class=\"token class-name\">I</span>̶n̶t̶e̶r̶f̶a̶c̶e̶<span class=\"token punctuation\">(</span>̶<span class=\"token punctuation\">)</span>̶ ̶<span class=\"token punctuation\">{</span>̶\n      p̶u̶b̶l̶i̶c̶ ̶i̶n̶t̶ ̶a̶d̶d̶ <span class=\"token punctuation\">(</span>inta<span class=\"token punctuation\">,</span>   <span class=\"token keyword\">int</span>   b  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>̶̵̶<span class=\"token punctuation\">;</span>̶̵̶</code></pre>\n<h4 id=\"after-lambda-1\"><a href=\"#after-lambda-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>After Lambda:</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">AddInterface</span> testObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></code></pre>\n<p>Here, type of the parameters are already known in the interface declaration, so we can remove types of the parameters as well,</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">AddInterface</span> testObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></code></pre>\n<p>even we don’t need a return keyword if its a single statement.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">AddInterface</span> testObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></code></pre>\n<p>Finally, code will be,</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AfterLambda</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token class-name\">AddInterface</span> testObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>testObj<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//30</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"an-important-rule-of-lambda-expression-and-functional-interface\"><a href=\"#an-important-rule-of-lambda-expression-and-functional-interface\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>An important rule of lambda expression and Functional interface:</h3>\n<p><strong><em>Lambda expressions can be created only for the interface which contains only one method declaration,</em></strong></p>\n<p>In this article we also created lambda expressions which accept this rule, we cannot use a lambda expression if the interface has <strong>two or more method declarations</strong>.</p>\n<p>we know the Runnable interface, which only contains one <strong>run()</strong> method declaration.</p>\n<p>Another one of our own interface AddInterface, which also contains only one unimplemented method named add() method.</p>\n<p>In order to mention the interface which should contain only one interface, we mark those interface with @FunctionalInterface annotation. We have already seen this annotation in the internal implementation of the Runnable interface.</p>\n<p>On adding <strong>@FunctionalInterface</strong> above the interface, those interfaces must have only one unimplemented method. <strong>If we break this rule, the java compiler will throw compile-time error as below.</strong></p>\n<p><em>Invalid ‘@FunctionalInterface’ annotation; AddInterface is not a functional interface</em></p>\n<p>In Java8 introduces streams which use functional interface, Let’s see those in detail in another article.</p>\n<p>Happy Programming !!!</p>\n","humanTime":"20 April 2019","datetime":"Sat Apr 20 2019 12:00:00 UTC+00:00","timeToRead":4,"tags":[{"id":"Java","title":"Java","path":"/tags/java/"},{"id":"lambda-expressions","title":"lambda-expressions","path":"/tags/lambda-expressions/"}],"category":{"id":"Blog","title":"Blog","path":"/category/blog/","belongsTo":{"totalCount":17,"edges":[{"node":{"title":"How to send email with attachments in Node.js using Nodemailer","path":"/blogs/how-to-send-email-with-attachments-in-node-js-using-nodemailer/"}},{"node":{"title":"A deep dive into the Java lambda expressions","path":"/blogs/a-deep-dive-into-the-java-lambda-expressions/"}},{"node":{"title":"Automating Software Installation in Windows Using Chocolatey","path":"/blogs/automating-software-installation-in-windows-using-chocolatey/"}},{"node":{"title":"Cross-domain communication using window.postMessage()","path":"/blogs/cross-domain-communication-using-window-post-message/"}}]}},"author":[{"id":"kumaravel","name":"Kumaravel","image":{"type":"image","mimeType":"image/png","src":"/assets/static/kumaravel.63b95ba.62b7462775409c8a2ece49d93896682d.png","size":{"width":195,"height":250},"sizes":"(max-width: 195px) 100vw, 195px","srcset":["/assets/static/kumaravel.63b95ba.62b7462775409c8a2ece49d93896682d.png 195w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 195 250' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-acb62cea0c5ba9796bef793e28a4ac1c'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-acb62cea0c5ba9796bef793e28a4ac1c)' width='195' height='250' xlink:href='data:image/png%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCABSAEADASIAAhEBAxEB/8QAHQAAAQQDAQEAAAAAAAAAAAAABwAEBggBAgUDCf/EADcQAAEDAgQDBQcCBgMAAAAAAAECAwQAEQUGEiEHEzFBUWFxgQgUFSIykaFCgiMkM0NisVJywf/EABoBAAIDAQEAAAAAAAAAAAAAAAEFAAMEAgb/xAApEQACAgECBAQHAAAAAAAAAAAAAQIDEQQxBSFBcQYSMrEiMzRhgZHB/9oADAMBAAIRAxEAPwC1NKlSJtUIauLS2hSlqCUpFySbAChpmjjNlrBZCmIynsSdTsoxraB%2b47H0vQ29pDiBJ%2bLKy5hzy24ce3vYSbc5wgHSf8QCNu01X5%2ba%2br5krukfpA6UMhLcYJx5y1LeDeKMy8MCiAl5Y5jfqU7j1FqLMSSzLjNSIrqHmHEhSHEKCkqB7QRXznkv%2b5q1P35bqAdj0Pb96M3s6cW3MKxSFlLExzMLku8uM8rZTCldAe9JO3heiAtxSpA0qhBVg1revKWp0RHix/WCFFH/AGtt%2baGQ4KfZ%2by/LzXxHzIllSY6G5roLhBN7GwH4rGG8IJTiRbEWz33bNTxiLIkyMTmNvKE2a4lbjhSAdYT8xA6CmLEbNcZanY%2bLuIbQNWh%2bz2o3tptpFtt738KwSvlJ/C8DSOljFYkssaYbwiwXD0B/EUO4jJTuC6ohCT4Jrh5myqXsyYD8Mj8px2czHc0JsdCnE7j7VNcwSswTYsWNAniK662VLWlsE3HYO6/fvXFw/B8SiO82RLlKfSpJbcLyydexuL9CFdDVddjclNsunSvK60i096zemzWsNoCzdYSAo%2bNt63CrU0EuDa9ZTWtbA2oBYJszYF8AxjmMrKo0pS3U3H0m%2b4/Nc%2bfi8JnDX%2be800sIJ1KNqkvFnFo4gGKwoOzoim33EI3LaFagL92qx28KDa48PGH/AHpSQ842nSlKllOkXv076X31KMsrYa6a1zhz3HUHO2Hv4hhyHVMNBvVqXZQB8N//AGpfBQjMuNQ4sN4hpxWsuo30pG5I%2b1QeYyiQxyZGGMx2U9VGVrCvS%2b1EzgPh0RjB3pTQGvUqOwk9jaSLkeFyB6UaqVKSx0OtRc4QeeoVx03N/OsUr1i9MBOcrMWZsGy3H52N4gxETa4StV1q8kjc0C%2bIXtEttx3omUIiw8oFImyQPk8Uo7/P7VXrFcbnYpIcfmyXXnVm6luKKlH1Ncdd1KVckm1aVXGP3BkLfAfMj87Ps%2bDjD7ks4yyeYt5ZUpbiSVC5PbYq/FE/NnDx6MVy4rjrbKt%2beyL2Hcodn%2bqrFlbElYLmXDcRQopMZ9DhINjYHcfa9X3axRrC8IfnS3Erw9pkvlz/AACdX5FU3UqyOdmi%2bm91vGMoCWWcjTcXnJje%2bOSkjdaijShA71d/l212uMeNO8NpuS2suLS2YzUnUhYuHUkt6tY8Tf16dKmvBvN7eYoc2O6yyxMbWXwlpASFtqO2w7U9D6UCvajxHn8TWIwJIiwUp69qlE1zoK02pN5O%2bIOcZOuSxgMOT%2bN2W8bLTGKFeDzF7fxzqZUfBY6fuAooMutvtIdYcQ40sXStCgpKh4Eda%2beSX/l7rHapTlHPmO5YeBwjEnmG7/M0TqbV5oO1MZaOMvQ8C5WtbkEB3t31kJupw%2bVePMCHEFYBT206KUpN0kgHuO1VRWS1sbOJsQattkXMrDnA2DimJL5zcRoxXGyd1rQSEJPn8npVTnRqTUvyhmCUMsycvav5RUtMy1/1BBTby6H0qq%2bbqrlJdC/SVK%2b6Nb2bCdwkxpGC50juy1paYdQR3ITrO4Ph0t3VAeOeIe/cU8ac1agytLIPkLn/AGa6wUlLDbvalNqGU59UiTIecUpanHFKJUbk71j4ZY5Zi%2bnMb8e08YONi68v0eK123FOWAVKG9c4oKiUlRNulekQFLqSronpTmEnk821yPB2nDO8du//ABpUqzw3Za9jdf0U/wArbYkbd1KlVWr%2bVLs/Y06D6ivuvcm8hSvh6tz0PbQ1/sjypUqwcJ9UuyHfiLav8/wwPrHkK9E/R%2b4UqVO47nl3sf/Z' /%3e%3c/svg%3e"},"path":"/author/kumaravel/"}]},"previous":{"title":"Automating Software Installation in Windows Using Chocolatey","excerpt":"Installing required softwares in fresh installed windows is time consuming work. Chocolatey will install all your software in a single command. You just need to find the package name from Chocolatey and execute the command. That's it. Chocolatey will take care of remaining.","image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.3409214.f9e0abb270f9a613b4804e71cb68ce46.png","size":{"width":556,"height":312},"sizes":"(max-width: 556px) 100vw, 556px","srcset":["/assets/static/cover.3409214.f9e0abb270f9a613b4804e71cb68ce46.png 556w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 556 312' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-18ca322cda6cf0b59a92d476c0221eb2'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-18ca322cda6cf0b59a92d476c0221eb2)' width='556' height='312' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAYAAAA5DDySAAAACXBIWXMAABJ0AAASdAHeZh94AAAJk0lEQVRo3u1Z6VNVVxLPnzFVUzOTyWIIYohLxn1neyCCbLLvOwICsvPW%2b%2b69DxCDsqmgxl0TwYiCoCIx41LJ1GTyQROTsszgHuMyUzU182E%2b/KZPn/fwIbjE1PiYST50nXvO6e7T/Tt9Tve99xVHyDv4OdMrLyKkizZ4Grd6iC/0Fe%2b%2bdHIw0drBZAPZ8lIBcDnvCHob9QFvwuH/Ohx%2bP4Veg77890SvPbeM4NX9ae0Q6fyLgvCCEeCLenLelBaLdTU6LHoHlKbtsK3fBuUxsjZ0MikTzAmyNXbB3rQD9W37oDXvor5rXM4p67dPKNPcvhfNqu6ZCGAAaOerSiqR3XUBtUevwXLqIcwn7sN80o2or579J%2byf/mP8HM/fY7navtsIzO1E5qZzsA3/HaZBMf4A1qGHMA7cHSdrGvwBbX/%2bNzp6LngSgCmoLi5FbvsQ6g59BcuxazAf/SvMvd/BdOQ7frb2XUOK7WNkNhyHtf86j1mcPOLZdOQqlIGbSFGOYI6hCosiLKg/84DnbcdvIGLtdiRZuuEYvse8lmMjUrb3KlrP3kf7gSHPRkB1cRlyOoZR232ZHLwB09ER2AZuQT11F%2brQD8hrOYOps3MwJ7gGyonbMPWS8wSUeLYev8kkxrI3DCFN78OqtTtQ8sEXKN35F6yu3o9p8/IRUfIBynZ9ybzGjwmwE3cYvLbzD9F%2bcHhyAFDX/Q05dp2NK997EYmWwyjZ8QXyW/9Iu7iDndE/ecDg2GjHi7s%2bR23PFaTYjyI0fwuiK/YyJVp6kGw7gsDU9xFTuQ9pjn4YMjbBP7mJeQs6zqGg/SyMFA1t5/82eQCoOfQ17/qajvO029VkbC8C05oRW3MQKwu2wtJ3nYGJN36EjMZBpGrHEJq3GXG1H/KuL4pSEF2%2bBwsjbPBPauLWL7ERq6v2Y0G4mUGavqQYIdltWBxtZxBbzz2YRBHQ8w2H9oxlJbxDwuEg2jnh1NLVGuLqPmIw4o2HuB9ZuhNB6Rsxy68MqeoxZDQM8pzYYcFX1PkZsppOMVDhhduQrPQyWML5sELKGifvoOXsJAEgu22ILqxrSDB1Y16oERX7LnHI5mwc5p1dEqMiqnw3Zi4vw4qcdhRt/Qwh1NYc%2bpbujisMljJ4m4%2bPIO30PT4q4uwvi3Mgc/1JpDuO85yIlqwNpxiASREBVZQFsikL2PqvUciux2xDNSr2X0J%2b21kEZ7WS8xoSzD18yRVuuTB6iWnD9/nSFGTm7DHCZOod4bGKfRfx6pQYeM1IR2z1AQZDHIvwom0Mjrg4J8ElKNOgiABr/wiH5q9%2bHYJ5K43wmpmB5QkNnBWqDl6mHfue0t0tWITDwlHhsHDcSSIK3PvCyeKuP/E94Z%2b0ntvcTWc4ezDvaBY4zc57sBAqR077aRgPf4vKg1/zBfi6dzxfYMJRG%2bV%2bkbuFw6a%2bmzwm6gBRMzC59c191%2bWYEwxl8BZ0ihSRPRxnHsIu0h/VAK46ok0cgQ8/ke8jHgEgkCIgJws5Wz5F7eErvMMmMqxy/0U23jJwmys288kH7JS1%2bxLMg3dlNdd/UzpNlaDs35BAMBgjsuDpu8GhbuLC6ipMx%2b%2bwLuYfoDvg83%2bhfd8gdMNU%2bV7yUgGgc1dPbd3yt7AmLQN1B76Exemc9bQoZe/C0v0VbJuPwFZZi43F6WjMioIpOx1Ky0FYKGKE80rDFthrrbBQZWcWpbQoc6n0tQx8D0vPZY4Kc/8tnrN2nYC92gQbvTdYdp5BBzm/dW2SpwCYJgHw80bxvN/Btmo%2btOxEKGYHbPVboRbmQY9eDEfgW9CW/BZtcfPRmOgH86LfoIGOjhYXADUrgea94Fj2KrSkUNia98BOLzpNehOMaXHQI%2baxPhEJikmTTvrJt0Xd4IOu3DB0ZoV46Ai4APAnABZ7QQnwkq/FbCCR/xv8qize2VXDNLQm%2b6ExOQhm4q8PnU5z5Ljgp6PkWDGdgdDJscbAN7El04C6pW/wERNHTYsPkvqCfeAQsuJ7AK3flR%2bBzrxVHroE3QFYNAXWQBmGGh0NzdWyYT6w%2b3uhJWEpGpMCYVo2hb8laEzEQzvJJPoElACnIz8KdQHSKTGnU7YZwysoaCq68giA3HAPA%2bD3NooW0E6Gv4cNUXPQFDmbaM4Yagyfhc0ZBgIgAPbgd/F%2b9NwJ%2bZoiZqM5Zj46yDGTgfiinONRcyfk3VYQic6cMM8CUEsAOGKXYndZInaWJDyB4rGnPAWbMkLRtSb6qby7y5KwtTAGrZmh2LMuiWWfpHNXaSJHgMMTd4Bc1Af1YbPQkW5AR1oQ2lMD0Z42ATnHW5L9x/SfxNeaEoC21MBn8nakB6Elcdl/B4CxHz2dCzzWd/GI8ziGDFPHj/G4z1ge9/7T5J%2bkz6lz1KbHbXb/dvljAHhckcOZZ0e/ALst8Ei5L3%2bhZRK3teiPkpPH4CNbF4/BW37ZdclPSO849TnlXOPuz2Sf0OVuo5AZZ%2bcTwHgqAOx82B%2bk8WIhyutsuHNRTnUGn0fPNK%2bvnOUcd/IIB4RB4bOlTsET9h70GArfgClOMKZKEnJM3pKEHS45kTqZx/uRHcQr6gWuOYQdQjZA2DDzkV6njS6/ng7AaKj7yiImNYIqNQsr1FfNhZaxGnrkQmlUxHxaeAk7zHOxflTcxLOMMIidFDyU5wWf3ahAS4ti/WpRAew1FmjJYXJ%2b1RwGWo9aJGUjSS5qMQOkFmRBzYyVPLSOHrVQ2iGeiVddWyQLL7ZnsdOGSNKxQNogbKTWFRXPBECi7c2CirqRDLdDIbKXV1ApamRHRPkq5pT6zbBXVFLFpsu5ymrY162DorfxsxjXElcw2WtMsFfVsT7WVVbGMoqlnp5LqdpTnXpMUr9R5R1U8zOgWBuIGmmtKkliLcFDFaK9tAT2krXSRhqzV9aQDeVST53Cn9C1lHAGU3c/khMB4H7uxe5oCcFQ12TzIgJZNTOO%2b2pmPO%2bCaNW8dNqFQqg5yZKoJNbSo5lPGK1TcSOiQhOy2Um8W9wnUHh3SVZLDif%2bHHKkGNpqP15Hy4jlP0BaegxHjtCr5qVJXrFmUT7LqLkpRKlQiwslDwHGduZnypbG%2bIgEeT9fBLiff3nOvMee/dFz6k5ebvPeEm06JlzG8riPU48XA6KHzhivW7wXuO4OZ%2bv6%2bzR6L7hkXHfO6H3hfHa3ge8kp063rPV8R%2bCxdDL%2b9n92nxcbczu7jY/R7%2bvW%2bj41rf04G8aOPXcW%2bKk0Lo0%2b4/l/8u/wz/73%2bC8A/ALALwD839B/ADzmmGxCZMaYAAAAAElFTkSuQmCC' /%3e%3c/svg%3e"},"path":"/blogs/automating-software-installation-in-windows-using-chocolatey/","timeToRead":1,"category":{"id":"Blog","title":"Blog"},"author":[{"id":"kumaravel","name":"Kumaravel","image":{"type":"image","mimeType":"image/png","src":"/assets/static/kumaravel.f26c338.62b7462775409c8a2ece49d93896682d.png","size":{"width":50,"height":64},"sizes":"(max-width: 50px) 100vw, 50px","srcset":["/assets/static/kumaravel.f26c338.62b7462775409c8a2ece49d93896682d.png 50w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 50 64' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-acb62cea0c5ba9796bef793e28a4ac1c'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-acb62cea0c5ba9796bef793e28a4ac1c)' width='50' height='64' xlink:href='data:image/png%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCABSAEADASIAAhEBAxEB/8QAHQAAAQQDAQEAAAAAAAAAAAAABwAEBggBAgUDCf/EADcQAAEDAgQDBQcCBgMAAAAAAAECAwQAEQUGEiEHEzFBUWFxgQgUFSIykaFCgiMkM0NisVJywf/EABoBAAIDAQEAAAAAAAAAAAAAAAEFAAMEAgb/xAApEQACAgECBAQHAAAAAAAAAAAAAQIDEQQxBSFBcQYSMrEiMzRhgZHB/9oADAMBAAIRAxEAPwC1NKlSJtUIauLS2hSlqCUpFySbAChpmjjNlrBZCmIynsSdTsoxraB%2b47H0vQ29pDiBJ%2bLKy5hzy24ce3vYSbc5wgHSf8QCNu01X5%2ba%2br5krukfpA6UMhLcYJx5y1LeDeKMy8MCiAl5Y5jfqU7j1FqLMSSzLjNSIrqHmHEhSHEKCkqB7QRXznkv%2b5q1P35bqAdj0Pb96M3s6cW3MKxSFlLExzMLku8uM8rZTCldAe9JO3heiAtxSpA0qhBVg1revKWp0RHix/WCFFH/AGtt%2baGQ4KfZ%2by/LzXxHzIllSY6G5roLhBN7GwH4rGG8IJTiRbEWz33bNTxiLIkyMTmNvKE2a4lbjhSAdYT8xA6CmLEbNcZanY%2bLuIbQNWh%2bz2o3tptpFtt738KwSvlJ/C8DSOljFYkssaYbwiwXD0B/EUO4jJTuC6ohCT4Jrh5myqXsyYD8Mj8px2czHc0JsdCnE7j7VNcwSswTYsWNAniK662VLWlsE3HYO6/fvXFw/B8SiO82RLlKfSpJbcLyydexuL9CFdDVddjclNsunSvK60i096zemzWsNoCzdYSAo%2bNt63CrU0EuDa9ZTWtbA2oBYJszYF8AxjmMrKo0pS3U3H0m%2b4/Nc%2bfi8JnDX%2be800sIJ1KNqkvFnFo4gGKwoOzoim33EI3LaFagL92qx28KDa48PGH/AHpSQ842nSlKllOkXv076X31KMsrYa6a1zhz3HUHO2Hv4hhyHVMNBvVqXZQB8N//AGpfBQjMuNQ4sN4hpxWsuo30pG5I%2b1QeYyiQxyZGGMx2U9VGVrCvS%2b1EzgPh0RjB3pTQGvUqOwk9jaSLkeFyB6UaqVKSx0OtRc4QeeoVx03N/OsUr1i9MBOcrMWZsGy3H52N4gxETa4StV1q8kjc0C%2bIXtEttx3omUIiw8oFImyQPk8Uo7/P7VXrFcbnYpIcfmyXXnVm6luKKlH1Ncdd1KVckm1aVXGP3BkLfAfMj87Ps%2bDjD7ks4yyeYt5ZUpbiSVC5PbYq/FE/NnDx6MVy4rjrbKt%2beyL2Hcodn%2bqrFlbElYLmXDcRQopMZ9DhINjYHcfa9X3axRrC8IfnS3Erw9pkvlz/AACdX5FU3UqyOdmi%2bm91vGMoCWWcjTcXnJje%2bOSkjdaijShA71d/l212uMeNO8NpuS2suLS2YzUnUhYuHUkt6tY8Tf16dKmvBvN7eYoc2O6yyxMbWXwlpASFtqO2w7U9D6UCvajxHn8TWIwJIiwUp69qlE1zoK02pN5O%2bIOcZOuSxgMOT%2bN2W8bLTGKFeDzF7fxzqZUfBY6fuAooMutvtIdYcQ40sXStCgpKh4Eda%2beSX/l7rHapTlHPmO5YeBwjEnmG7/M0TqbV5oO1MZaOMvQ8C5WtbkEB3t31kJupw%2bVePMCHEFYBT206KUpN0kgHuO1VRWS1sbOJsQattkXMrDnA2DimJL5zcRoxXGyd1rQSEJPn8npVTnRqTUvyhmCUMsycvav5RUtMy1/1BBTby6H0qq%2bbqrlJdC/SVK%2b6Nb2bCdwkxpGC50juy1paYdQR3ITrO4Ph0t3VAeOeIe/cU8ac1agytLIPkLn/AGa6wUlLDbvalNqGU59UiTIecUpanHFKJUbk71j4ZY5Zi%2bnMb8e08YONi68v0eK123FOWAVKG9c4oKiUlRNulekQFLqSronpTmEnk821yPB2nDO8du//ABpUqzw3Za9jdf0U/wArbYkbd1KlVWr%2bVLs/Y06D6ivuvcm8hSvh6tz0PbQ1/sjypUqwcJ9UuyHfiLav8/wwPrHkK9E/R%2b4UqVO47nl3sf/Z' /%3e%3c/svg%3e"},"path":"/author/kumaravel/"}]},"next":{"title":"How to send email with attachments in Node.js using Nodemailer","excerpt":"Learn how to send emails in Node.js using the Nodemailer module","image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.4250cd3.a2359baff849b8f684836f5a43dde302.png","size":{"width":800,"height":400},"sizes":"(max-width: 800px) 100vw, 800px","srcset":["/assets/static/cover.1b91758.a2359baff849b8f684836f5a43dde302.png 480w","/assets/static/cover.4250cd3.a2359baff849b8f684836f5a43dde302.png 800w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 800 400' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-a924d2c5c263b77cc000cffee5c263fa'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-a924d2c5c263b77cc000cffee5c263fa)' width='800' height='400' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAGt0lEQVRo3uVZWW8bVRQOAglQkaq2UqFSS4sKFNoinhASDwgJwRu88cIDb0ioUptGSgFBszQhJU2TNAtJnb1OnDh7YseOHWdf2jheEmezZ8ZL7CxSKSJ/4eOc64zlukkQwpFi9eHo3pl75px7vrPcMzNpsizjeaa0gxAqyZKg5w4ASZJi4%2b5z5pPEGD/fTc5esg59BKibDMgKfM8YETXYT6MSM/5ZEFQZ/LyfRuWAjD%2bwCFiVvHi0Oo%2bQ7CcjfHEgRI13rspY9DJIEq3HRUWC8UFFhmtVIl7pwEBIOgC8US8Z/c1YGUaX5xBRguI6apSMDb%2bEVoeC720hrPsT0yFqoJfGEBlvX/bh6z4PHCsSAkqKAMAUIM9/MpSLT235WPatxtKBAWCje90KTuoiKJgKCEC8MRCinmcQOVI%2b65zHaa2bZKRQBMg7Ofvl8O84ZriCbycqBACqZxmAHpeCc/oIzrdHUGf3YzMgUdpEn4%2bCJOM74wLSqp243DqfWimgAvD5cAHOmjLwhvEark03YF0JkZESIjsAvEXGv9cRwcXOsIgIBoY9vRWUccO6gJc0Thypd%2bN9XQoDcHrgOt413xAg3LZ3EQhrWFN8sQi4TMa/TUB81BPG2KKM7TUFxWMevKyZw7FGN16tc6U%2bAO8QAOfNmXiToqHOZcHfwRA6XZIAgL1/iegszb8yhVE1uYhjmkd4jTx/vMGNV1IZgC%2boBnAKXDD/KIhBuGD%2bCaMrM7AthCkFwvigKwoAR8LFznWcbZFwtN6F4%2bT9E0RHaH4pVWvAx9YcHO3/Aa8br%2bIk0SlKg6P9V/ChJRN3Hs7iVOsmzujDONMWidG59g2c0Mp4gfL/xRoX0u47cYZOAY832hClDAAyVfKmxWHcdfTinsuAotlu3LX3oNjei2JXD6odYyidDqJkRkHpjP8pKp8NoXBaQt7YEnLHllE6tSyKpyynUB/A85mRcYSokVmZm8f2xmM8WdvE9uZjuKfsiEgKtrfCeBIO4EkkiD9pfBxSxFxacEJyO4g3gr/EWnDPd4bDmwKKgmvX0/Hb7QJUae6jo6sTPf196DX042ZOFvTt7dC16WG2WGmtG4PWIUxMTcM0aIHBZEZ3b5%2b4ZxmyYcA8mDovQ6IVJuOXl5eh0WiQk5OD9PR0FBYWIisrC9nZ2cjPz0dGRoa439jYCIPBgLa2NtTW1qK0tBQ6nU5QSUkJ6urqYDKZEAqF4PP5UqcG8GYdDgfm5%2bcxPT2NkZERzMzMYGJiAlarFbOzs7DZbPB4PAIsHqempgSvy%2bXCwsKCmLOMlZUVAWpKvA0%2b9TocCMDv9yMYDGJtbU2M7MlwOBy7x4YxqXxMPFevWUa88Yc6AhI/YMSTGr48xs/34kukRPnJ/FCS9l%2brO2/S6/UmKJf2/RoUv8F/W0u8jgdlLwD2%2b4qU1AhgoRzG6%2bvrYs5AqICo3lVPgXiPJ/LwXIQ%2bhbjg2wGUQz9eLvOwPpV3Nz3qPfXa94xzkhgBrGBkeBhtLTqhNBKJxADhfN3c3MTw0BAeUsHjHGcKETFfhHj4mvm4DnBx6%2bvthdvtxvrGhpDNcx75OkhyuRiOUgH1LHgwZ7cL%2bQGqDaxvkgrq1OQkNre2BC/L42LKulQgk5oCLJQV3MrKRk9Xl6jWHfp22Oi81jY1YXR4RGzqFh13E%2bMTwjMdej2sFgv0ra1oeaCFkY688bEx9HZ3w9jfj4qyMnR1dMDQ1y%2bKHsvt7uxEi1YLJ50ATqcTGVevooGOyAF61tDXB/OASdzPvZkl7vX19JC%2bcbhpP60tLegnnhk6QQI70ZX0GjBgMKK06C6yf/kV94qL8Ud5udhgyZ0iaKqqxZy91VRfjzw692upHygpKkJNdTXKS%2b9B29gknuXnqioqBd2m3oA9r29tQ0FengC0jXoBjoAG6gV%2bzswUPGxsZVk5CgsKBHD5ObnIJcANBKZjbk7o5zUGWO0dkgaA%2bNi5ugpdczPqamrQSBtrqK0jjwwIL7PntNTYVJJhHMqWwUHabBlslBK8ZqUujz1cVVEhgGNvNT94gE7qCsupAVqhfsBkHEBTQ4OIEpPRKPoIi9mMdmqUWCfzs/52AorlcKRUVVZiiHoLnbZZpGY9OYBlclocSA1grywtLYk85pTgUI8VIEKc19Q%2bgOdeAi3xLGcg1We4EVrdhSdeN8viFGF5rENNR64HDBxTU32DiIrdjsykngKsXDWW54kpohoiAItbT3xXiAd1P%2bMTHRC/j/jnPeSY%2bPtJL4L7NTrJoP8rezdnJD0CDhsl4xdaSgNwaP8OpxL9A7Sdd8b1kuu8AAAAAElFTkSuQmCC' /%3e%3c/svg%3e"},"path":"/blogs/how-to-send-email-with-attachments-in-node-js-using-nodemailer/","timeToRead":2,"category":{"id":"Blog","title":"Blog"},"author":[{"id":"eswariboopathikumar","name":"Eswari Jayakumar","image":{"type":"image","mimeType":"image/png","src":"/assets/static/eswariboopathikumar.dea1acb.dde169cbb22201165b7439b3decfcd9f.png","size":{"width":64,"height":64},"sizes":"(max-width: 64px) 100vw, 64px","srcset":["/assets/static/eswariboopathikumar.dea1acb.dde169cbb22201165b7439b3decfcd9f.png 64w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 64 64' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-ea57635d54ff29a6ea633827f1c6cf7a'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-ea57635d54ff29a6ea633827f1c6cf7a)' width='64' height='64' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAACXBIWXMAAA7EAAAOxAGVKw4bAAADC0lEQVR42u2by2oqQRCGjcZAwBfwAllpvEWfQdx4z8JXCPgMgguFmIXLbDSggoiPo5iNJARX2boRFW/ROnRDi8w5CrF7anrOzEARQlqr880/VV3VPRYw%2bGUxAZgATAAmABOACUB/136/PxgaAOZM6Zx3EroBcOxYOQlZDEUBWt11zWPAMendbgfL5RIWi4VmRvwr1YgCgPzz5CoUCuB2u8Hv94PX60Uz4s/j8cDT0xN3PLgoBjAAiUQCLBaLZhaPx7nuPrcCcrkcncj19TVcXV2hGfFH/CaTSVwFKAFks1k6EZvNhnrnrVYr/UkUiKoA5SNgAjABaAOA%2bVMCQM8CsilASgAkapO/i7Sbmxv63alUSm4A7E5VKhUYj8fQ7/dhOBxy2/v7OwwGA/j6%2bsKtBS4F0O12Va0K0avB3wJoNpt0/Hq9hp%2bfH2HG5iG9AlqtFh2/3W5VK4GlTIOnAOi6JWYCkOQRENUWQw%2bC5LO8JrIXiQKg0%2bmolv6kVgCzaDQKj4%2bPtH4nq7dLLZPJQCwWg16vR/2TVMirBF3WAsVi8a%2bYIjUAUg%2bQx4HX7Hb7YWktKqvoSgHMT7lc1pcC1AZgeAVID0B0N1gZAwyXBUqlkr4U4HQ66W6Oz%2be72O7v7yEQCIDL5YLX19fDOkAXS%2bF6vU7HT6dTmM/nXDabzWC1WgnbnkcB0G636Xj2OdGdIOkBsGpws9moUg2a/QATgMEAnDqiY6gYICoe6DYLiMoIKADe3t7oeJLHSQ4XZeSM0L/6jNKtBMl5noeHBwgGgxAKhSAcDnNbJBKBu7s7aDQaXKtClM1RNesC3t4AakdIVFV43B16eXnhyjC6rAaPfVarVTwFyHJI6hwAwytAVQAyKYB1hzQFkE6nUSL9uezy/PysHYB8Pk8n4XA44Pb2FtWIT%2bK7VqvhB0Hm5Pv7G0ajEXx%2bfsLHxweqEZ/E92Qy4dopvviVGZnKWrSOkJKyiK1uHmPLX3QFyPzKzG/PE%2bn6rbFT8j/XI1D%2b/l%2b8NnfuLhtCAezYzKkYdTxGCeAPBVajw1K4ycsAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"path":"/author/eswari-jayakumar/"}]}},"context":{"previousElement":"9de321d394d0ba4e31f62a2a4504d048","nextElement":"56a390a3bc07242cb481da9f234df69e","id":"a0e95e836497dccf407bff24d287a81d"}}