{"hash":"d624f268515278f2a159283644e4191904732a22","data":{"blog":{"title":"A deep dive into the Java lambda expressions","path":"/blogs/a-deep-dive-into-the-java-lambda-expressions/","image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.872e63c.94aa1ac622d921496a0d91e818bd4f74.png","size":{"width":1600,"height":800},"sizes":"(max-width: 1600px) 100vw, 1600px","srcset":["/assets/static/cover.bb17b12.94aa1ac622d921496a0d91e818bd4f74.png 480w","/assets/static/cover.b28baf0.94aa1ac622d921496a0d91e818bd4f74.png 1024w","/assets/static/cover.872e63c.94aa1ac622d921496a0d91e818bd4f74.png 1600w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1600 800' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-3d91e583b689239ac83b1ec9e27e6489'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-3d91e583b689239ac83b1ec9e27e6489)' width='1600' height='800' xlink:href='data:image/png%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAgAEADASIAAhEBAxEB/8QAGQAAAwEBAQAAAAAAAAAAAAAAAAQGBQID/8QAKxAAAgIBAwMEAQMFAAAAAAAAAQIDEQQABSESEzEGQVFhIjJxgRRScpHh/8QAGAEBAQEBAQAAAAAAAAAAAAAAAAMBBAb/xAAjEQACAQIFBQEAAAAAAAAAAAAAAQIRIQMEEzGhEjJRgbHw/9oADAMBAAIRAxEAPwDa9If0%2bPtWNhYu4xu8Ezy5CwxuHYoA4HWo4RjxZNcCx5GpfffU274sKbccZ9pykCtL2pmDMeTZH8/J4r5vSe6ZQh9H7JBiKsRyllOW8YozGOQqit80Dde9gm9TpZpWQO3gBAWNAAcAfsNVoe/wcsnJzle74f7gcz93z8%2bMJl5LyJdkUF6z/c1AdR%2bzzpDVNlyeneskRT2Xc9xEIQ8igBfIFk8V4HzpZZdjbKJYSLjLOzrH2yS6FVoXdiiD/vQ6I4iStFr0YWjVFFmbCry9OH0r0Mqu6u/kUCw6v38VzVaMnJ9PviSxwwyq4D9oFD1BiBXU3VyQQfaqPzobquvayd0aNMwYry4mTkfpjgC2SOCxIAW/nyf4OtKtpbnc2X1bZjYaAhY3eV7H6nPAN/4gDSejRoEktjfwd5xUgwocvE7yQp2j1UQLcsXArzRIrXbb7iBnCbbCylGUM6ISxJH5EUB4Ff8AdTujWEtCFalG2/YZDAbfRY2GHRa/YFUTfi/HjnzpfL3jGyMbJiXb4oe4Kj7YUdsfjxdXVgn7vWJpjGwsrKWRsXGnmWMdTmOMt0j5NaDShG54AEngE%2b/GqHY8N5vS3qKeQXBHHEYwfeUSCyv2ELXXs3OuvTmz7p25txxIcM9lHBjzPDAiiOluD59z9/B1XepcTa02h8iWDKOHgzLFGsRRYWYWsqKFANFq/K745HBGlSGPmF1KC8r7sf/Z' /%3e%3c/svg%3e"},"image_caption":"A deep dive into the Java lambda expressions","excerpt":"Lambda expressions are introduced in java8 version.Let us look about Lamda expressions in detail.","content":"<p>In this article, you will learn about what exactly lambda expressions and how to use it in java.</p>\n<p><strong>Prerequisites:</strong></p>\n<ol>\n<li>Knowledge in java</li>\n</ol>\n<h3 id=\"introduction\"><a href=\"#introduction\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Introduction:</h3>\n<p>Lambda expressions are introduced in java8 version. While java introducing this feature, It’s new for java. Not for other languages.</p>\n<h3 id=\"before-lambda-expressions\"><a href=\"#before-lambda-expressions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Before lambda expressions:</h3>\n<p>Before jumping into the lambda expression, we need to know what’s the problem java developers faced before introducing the lambda expressions.</p>\n<h4 id=\"example-1\"><a href=\"#example-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Example 1:</h4>\n<p>Let’s take an example of creating thread before lambda expressions are introduced.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRunnable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am executed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BeforeLambda</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token class-name\">Runnable</span> runnableObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyRunnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>runnableObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The internal implementation of Runnable is </p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang</span><span class=\"token punctuation\">;</span>\n<span class=\"token annotation punctuation\">@FunctionalInterface</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Don’t worry about <strong><em>@FunctionalInterface</em></strong> for now, we will see what is the use of FunctionalInterface in this article.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 770 131' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-3147fdd66d803b6d9c70798a2d7e5070'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-3147fdd66d803b6d9c70798a2d7e5070)' width='770' height='131' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAALCAYAAADP9otxAAAACXBIWXMAABJ0AAASdAHeZh94AAADlUlEQVRIx6VW2XbaSBD1N%2bfkK/IDmd/Iy7xmsccniYkhXrDDJoTQigRa0a47VS2EBYTYOH1O04tq61u3qzmrqgpxkiLPC6RZjrKswI3391uzl6YpgiA4KndMrypL0s3IT4Ysz4VPHjPyu44TWudiXdVKQqcoCiSkw2NRlFt71TEfNLI97jnp1NvVzne21czPePIwnKL/a4L%2bSIHjPh2srdSe7zt9CQCNrG7a5E/Gw0iGatiQZBUPAwl3QwW/BhMohrNjOyOwpJmG24cxZtriaDztPc/z8TiaYijrKMrd778FgBtnnjfKsjxQONZPZQDbbnohskP%2bOKCNz0J82w%2b4RM3SbBvbcwliuZpdRSO9E0/7jAKAhOgXRdEWmZe2lzJgN1M1AM0ouqB3QfNiu9fWa9YNcO04n2Vk9ZRYtt/OPrczFnB9H0t3hd7PHi6%2bfMK3r1e4uuqg86OD7nUHXy/P8fH8Evd39%2bj1uvj8%2bRNMa3ESAxo5d%2blAUeawbRvKbIYZ9cl4iLmmQ5ImGA4GkGcKQkpIVdaBG0b9bUJdUzXSkaHM1T%2bycts3IKxWK0xJn323ZQQDUi9EQHefi0ZOdy5JEnH3omgtCl6SxIjWa8RxTGyJBVsSKpyvAaAo8if6bzJaM2I3S81%2bk/ksS0V8jWzRYskxVla/ufttBmwB%2bPf9P3jz9h1kQvXupod%2b/xHD0RjSVMJ4NED//hY3tCfLU4HiaCyJSn5qIeQW0uuxWNgiI4ZhwDJNYoJMjLKhqnPMZBm6YQrgGz1dU6HpBkxDhUW6M2KIpmuwLAuO48AgG2yv9rHHhA0DPM%2bDRnYM0zoE4Pb6Bh8%2bduEsl5hTMIZuUjAqUZEDs4h2ClVr6pJEIMgEzPQkBrTl1lEogmGW8VPqui6NvqC8T1eR174fCLY12fI9F7azFGMQRkKfD%2bzS6FNf0px1%2bRndqTetgzKjWY9t7wDAP5zNJF7DsRf0TBmUAR1RGIoAbdpbUVBpHAmHQRD%2bVRFM6eAcRLQ5cMD1h7LIey7VodVyJZ6xokX/NV2/cAMWj3zomOw8ewU2DOCRbXieewgALxjNBRUleTrBxeV/6Ha76HU6VPB6OL%2b4oOL4E4/9O/y47uL79yvxp2X/br8UAI8OyZT16OAmg63rguIL26FRE4WRr0AYRttawUlQFEWw0qLia1KC%2bEo89zS390JKaH0FzEMAXtNOyf5rdU75j/EHiQOZ9vp/W/i1ZU5LFPgAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"770\" alt=\"A deep dive into the Java lambda expressions - Image 1\" data-srcset=\"/assets/static/BeforeLambda.061cc64.91609ce9b05574c0785377676153e207.png 770w\" data-sizes=\"(max-width: 770px) 100vw, 770px\" data-src=\"/assets/static/BeforeLambda.061cc64.91609ce9b05574c0785377676153e207.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/BeforeLambda.061cc64.91609ce9b05574c0785377676153e207.png\" width=\"770\" alt=\"A deep dive into the Java lambda expressions - Image 1\"></noscript></p>\n<p>Now compiling this code, the Java compiler will generate below two class files.</p>\n<p>Now let’s reduce this code using an anonymous inner class.</p>\n<h4 id=\"example-2\"><a href=\"#example-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Example 2:</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BeforeLambda2</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token class-name\">Runnable</span> runnableObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am executed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>runnableObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Now Let’s compile this code and see how Java compiler-generated class files,</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 746 132' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-4c8243ec766a3f1e12aa02d70fe90b1a'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-4c8243ec766a3f1e12aa02d70fe90b1a)' width='746' height='132' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAALCAYAAADP9otxAAAACXBIWXMAABJ0AAASdAHeZh94AAADx0lEQVRIx5VW2XLqRhD1Vyd5T%2bUP8jmpSjmJl5jLZmNf9kWAJLQhCe3bSfcgcQUBjKdqakYzPb2e7tZdEIRwvQBBGMGnfV4U4FGUa31UZ1EUIU3Ti3SX3hV5LmQ4Ox%2beHxCfWMgNad3aLmzXp/voSIeiyLEj/Tw/FLQZ8Tgnd0%2b7n3meiTc8ozg5uueRE4%2b85HNnb2289qcYzlYYjCWkWf4/hqfzVOhnjqi/tR0XH8M5ejRVVcdwLmM0X2M0meN9JIn9sZEFHHeH1tsQg8kScZKelX3sgBwb3cTb9wlkzbrugE9Ch1vGZyioC/7KqIzZvy2uo6u2nsq5hBbhACa2bQdhEAhYR3EsGGRZthdMK5/zWZomCIguO9wXV1PmkhPSkidP5hOTzCRJxDevPLPshxFMkwn5e/r9zA8BOofCU8QWpVzmndcQdsdM17IKS5Pxx5/3eHr%2bhtdOC/88PKDTbuHp5RvarQbu//qb9v/i8fER49EYreYLHh6fYZHzbk0BHo5jY7VaQd1ssJSW0DUVk%2bkM8/kCmqbTOqV7CQqlR6WoaRhY05vxeILFYgFdp9QZDuHuvKuG1%2bWmcQSd%2bAwGA1jb7Q8HsJAtHVRRqDycJDHCMBTQ48jHVPg4%2bgkXP%2bKZEL1D%2bXxrMazuszLKKKFaRZX3TFPts4wRkh0QEJe6sV75ge7G%2blOmc53/wQGskLrRYOkKnhsU7c4bJqMhrR1Mp2P0Pj4w6H%2bg0%2b3ie7%2bP5XKJNiFjRhG7tQbUaTxvR8VPhUZRVGQFlmlgQUhgvoZhUvSXUBQZhrk9vOUAaZomaGSZ7wyBBM/3z8P9THFOkwimZWE2m1Ehdo4RwO0oI4I1KcQw3KiKEMQCFXVD3zI5YwZZUQQc53PaE20VodPucM0B3EI9zxOI88mAIKCW6PlUg0Jxxg5i5PGZQEr5Zue6hDgHu91OoIb3aVmnPit4VQ2IBWodsR4cULgOfv/pVzw3%2b%2bQZmwzW4Ng2TNNEQAoaZLBlmeR1k3q1TQq4cEkZ7t23Rr9Ox0ZxKrET2JgoCkWEWTF2CO95JmW748H0TOuQXN/3SL4j6DkF2VHsNC7kVeE%2bhwBOKZ/%2bPdgGdujBATEx%2b%2bXn33DfeEez2USr/Yr%2bew8vjRd0ux10Xnt473Wp4D2h2W6jS6nRoFSZLaSbo19XxCXFGV2maRHUFRg6FcPVWpyx4RJBW5IWtLcPTrAIuks642KpbVRKIYVoJMxJB36jKmusliv68fHPtsV97YkFz%2blpCuCLo/hC///q/8K17nHjg4st8ZIu/wE2na%2bB%2bQpeMQAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"746\" alt=\"A deep dive into the Java lambda expressions - Image 2\" data-srcset=\"/assets/static/BeforeLambdaAnonmus.075226a.d4b09b100dd0e593efaa763c6d4bc671.png 746w\" data-sizes=\"(max-width: 746px) 100vw, 746px\" data-src=\"/assets/static/BeforeLambdaAnonmus.075226a.d4b09b100dd0e593efaa763c6d4bc671.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/BeforeLambdaAnonmus.075226a.d4b09b100dd0e593efaa763c6d4bc671.png\" width=\"746\" alt=\"A deep dive into the Java lambda expressions - Image 2\"></noscript></p>\n<p>Here, the Java compiler creates two class files for the main class and another for the anonymous inner class.</p>\n<h3 id=\"problems-before-lambda-expressions\"><a href=\"#problems-before-lambda-expressions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Problems before lambda expressions:</h3>\n<p>let’s analyze our anonymous inner class, Does this code has any redundant information?</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Runnable</span> runnableObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am executed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Here we are creating a reference for Runnable interface, so redundant information new Runnable() is not necessary here.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Runnable</span> runnableObj <span class=\"token operator\">=</span>̵ n̶̵̶e̶̵̶w̶̵̶ ̶<span class=\"token class-name\">R</span>̶̵̶u̶̵̶n̶̵̶n̶̵̶a̶̵̶b̶̵̶l̶̵̶e̶̵̶<span class=\"token punctuation\">(</span>̶̵̶<span class=\"token punctuation\">)</span>̶̵̶ ̶̵̶<span class=\"token punctuation\">{</span>̶̵̶\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am executed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>̶̵̶<span class=\"token punctuation\">;</span>̶̵̶</code></pre>\n<p>Here We are creating a reference for Runnable, and Runnable is an interface it only contains one method named <strong>run()</strong>. so we have the only way to provide the implementation for run() method. so redundant information public void run() is not necessary for an anonymous inner class.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Runnable</span> runnableObj <span class=\"token operator\">=</span> n̶̵̶e̶̵̶w̶̵̶ ̶<span class=\"token class-name\">R</span>̶̵̶u̶̵̶n̶̵̶n̶̵̶a̶̵̶b̶̵̶l̶̵̶e̶̵̶<span class=\"token punctuation\">(</span>̶̵̶<span class=\"token punctuation\">)</span>̶̵̶ ̶̵̶<span class=\"token punctuation\">{</span>̶̵̶\n\tp̶u̶b̶l̶i̶c̶ ̶v̶o̶i̶d̶ ̶r̶u̶n̶<span class=\"token punctuation\">(</span>̶<span class=\"token punctuation\">)</span>̶ ̶<span class=\"token punctuation\">{</span>̶\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am executed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>̵\n<span class=\"token punctuation\">}</span>̶̵̶<span class=\"token punctuation\">;</span>̶̵̶</code></pre>\n<p>Let’s see if the interface has some parameters with the return type.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">AddInterface</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span>  b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Anonymous inner class will be,</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">AddInterface</span> testObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AddInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>testObj is the reference for TestInterface, Types of parameters in the anonymous inner class are already available in the interface as well. so it’s redundant.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">AddInterface</span> testObj <span class=\"token operator\">=</span> n̶e̶w̶ ̶<span class=\"token class-name\">A</span>̶d̶d̶<span class=\"token class-name\">I</span>̶n̶t̶e̶r̶f̶a̶c̶e̶<span class=\"token punctuation\">(</span>̶<span class=\"token punctuation\">)</span>̶ ̶<span class=\"token punctuation\">{</span>̶\n      p̶u̶b̶l̶i̶c̶ ̶i̶n̶t̶ ̶a̶d̶d̶<span class=\"token punctuation\">(</span>inta<span class=\"token punctuation\">,</span>   <span class=\"token keyword\">int</span>   b  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>̶̵̶<span class=\"token punctuation\">;</span>̶̵̶</code></pre>\n<p>Also, class files are getting generating for an anonymous inner class.</p>\n<p>So Java developers consider these problems and introduced lambda expressions.</p>\n<h3 id=\"lambda-expressions\"><a href=\"#lambda-expressions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lambda expressions:</h3>\n<h4 id=\"syntax\"><a href=\"#syntax\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Syntax:</h4>\n<p><em>parameters -> expressions</em></p>\n<h4 id=\"example-1-1\"><a href=\"#example-1-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Example 1:</h4>\n<h4 id=\"before-lambda\"><a href=\"#before-lambda\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Before lambda:</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Runnable</span> runnableObj <span class=\"token operator\">=</span> n̶̵̶e̶̵̶w̶̵̶ ̶<span class=\"token class-name\">R</span>̶̵̶u̶̵̶n̶̵̶n̶̵̶a̶̵̶b̶̵̶l̶̵̶e̶̵̶<span class=\"token punctuation\">(</span>̶̵̶<span class=\"token punctuation\">)</span>̶̵̶ ̶̵̶<span class=\"token punctuation\">{</span>̶̵̶\n\tp̶u̶b̶l̶i̶c̶ ̶v̶o̶i̶d̶ ̶r̶u̶n̶<span class=\"token punctuation\">(</span>̶<span class=\"token punctuation\">)</span>̶ ̶<span class=\"token punctuation\">{</span>̶\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am executed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>̵\n<span class=\"token punctuation\">}</span>̶̵̶</code></pre>\n<h4 id=\"after-lambda\"><a href=\"#after-lambda\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>After Lambda:</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Runnable</span> runnableObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am executed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>If lambda expression contains single-line expressions, we even don’t need curly braces.</p>\n<p>so finally,</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Runnable</span> runnableObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am executed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Final code will be,</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AfterLambda</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token class-name\">Runnable</span> runnableObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am executed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>runnableObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>We can pass lambda expression directly into the Thread class parameter as well like below,</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AfterLambda</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am executed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"example-2-with-parameters\"><a href=\"#example-2-with-parameters\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Example 2 (With Parameters):</h4>\n<h4 id=\"before-lambda-1\"><a href=\"#before-lambda-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Before Lambda:</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">AddInterface</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span>  b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Anonymous inner class will be,</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">AddInterface</span> testObj <span class=\"token operator\">=</span> n̶e̶w̶ ̶<span class=\"token class-name\">A</span>̶d̶d̶<span class=\"token class-name\">I</span>̶n̶t̶e̶r̶f̶a̶c̶e̶<span class=\"token punctuation\">(</span>̶<span class=\"token punctuation\">)</span>̶ ̶<span class=\"token punctuation\">{</span>̶\n      p̶u̶b̶l̶i̶c̶ ̶i̶n̶t̶ ̶a̶d̶d̶ <span class=\"token punctuation\">(</span>inta<span class=\"token punctuation\">,</span>   <span class=\"token keyword\">int</span>   b  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>̶̵̶<span class=\"token punctuation\">;</span>̶̵̶</code></pre>\n<h4 id=\"after-lambda-1\"><a href=\"#after-lambda-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>After Lambda:</h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">AddInterface</span> testObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></code></pre>\n<p>Here, type of the parameters are already known in the interface declaration, so we can remove types of the parameters as well,</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">AddInterface</span> testObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></code></pre>\n<p>even we don’t need a return keyword if its a single statement.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">AddInterface</span> testObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></code></pre>\n<p>Finally, code will be,</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AfterLambda</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token class-name\">AddInterface</span> testObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>testObj<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//30</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"an-important-rule-of-lambda-expression-and-functional-interface\"><a href=\"#an-important-rule-of-lambda-expression-and-functional-interface\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>An important rule of lambda expression and Functional interface:</h3>\n<p><strong><em>Lambda expressions can be created only for the interface which contains only one method declaration,</em></strong></p>\n<p>In this article we also created lambda expressions which accept this rule, we cannot use a lambda expression if the interface has <strong>two or more method declarations</strong>.</p>\n<p>we know the Runnable interface, which only contains one <strong>run()</strong> method declaration.</p>\n<p>Another one of our own interface AddInterface, which also contains only one unimplemented method named add() method.</p>\n<p>In order to mention the interface which should contain only one interface, we mark those interface with @FunctionalInterface annotation. We have already seen this annotation in the internal implementation of the Runnable interface.</p>\n<p>On adding <strong>@FunctionalInterface</strong> above the interface, those interfaces must have only one unimplemented method. <strong>If we break this rule, the java compiler will throw compile-time error as below.</strong></p>\n<p><em>Invalid ‘@FunctionalInterface’ annotation; AddInterface is not a functional interface</em></p>\n<p>In Java8 introduces streams which use functional interface, Let’s see those in detail in another article.</p>\n<p>Happy Programming !!!</p>\n","humanTime":"20 April 2019","datetime":"Sat Apr 20 2019 12:00:00 UTC+00:00","timeToRead":4,"tags":[{"id":"Java","title":"Java","path":"/tags/java/"},{"id":"lambda-expressions","title":"lambda-expressions","path":"/tags/lambda-expressions/"}],"category":{"id":"Blog","title":"Blog","path":"/category/blog/","belongsTo":{"totalCount":16,"edges":[{"node":{"title":"Learn Hoisting in Javascript","path":"/blogs/learn-hoisting-in-javascript/"}},{"node":{"title":"Add Prism.js – Syntax highlighter to Website","path":"/blogs/add-prism-js-syntax-highlighter-to-website/"}},{"node":{"title":"Automating Software Installation in Windows Using Chocolatey","path":"/blogs/automating-software-installation-in-windows-using-chocolatey/"}},{"node":{"title":"Debug device specific issues on your website - Remote debugging","path":"/blogs/debug-device-specific-issues-on-your-website-remote-debugging/"}}]}},"author":[{"id":"kumaravel","name":"Kumaravel","image":{"type":"image","mimeType":"image/png","src":"/assets/static/kumaravel.63b95ba.62b7462775409c8a2ece49d93896682d.png","size":{"width":195,"height":250},"sizes":"(max-width: 195px) 100vw, 195px","srcset":["/assets/static/kumaravel.63b95ba.62b7462775409c8a2ece49d93896682d.png 195w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 195 250' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-acb62cea0c5ba9796bef793e28a4ac1c'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-acb62cea0c5ba9796bef793e28a4ac1c)' width='195' height='250' xlink:href='data:image/png%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCABSAEADASIAAhEBAxEB/8QAHQAAAQQDAQEAAAAAAAAAAAAABwAEBggBAgUDCf/EADcQAAEDAgQDBQcCBgMAAAAAAAECAwQAEQUGEiEHEzFBUWFxgQgUFSIykaFCgiMkM0NisVJywf/EABoBAAIDAQEAAAAAAAAAAAAAAAEFAAMEAgb/xAApEQACAgECBAQHAAAAAAAAAAAAAQIDEQQxBSFBcQYSMrEiMzRhgZHB/9oADAMBAAIRAxEAPwC1NKlSJtUIauLS2hSlqCUpFySbAChpmjjNlrBZCmIynsSdTsoxraB%2b47H0vQ29pDiBJ%2bLKy5hzy24ce3vYSbc5wgHSf8QCNu01X5%2ba%2br5krukfpA6UMhLcYJx5y1LeDeKMy8MCiAl5Y5jfqU7j1FqLMSSzLjNSIrqHmHEhSHEKCkqB7QRXznkv%2b5q1P35bqAdj0Pb96M3s6cW3MKxSFlLExzMLku8uM8rZTCldAe9JO3heiAtxSpA0qhBVg1revKWp0RHix/WCFFH/AGtt%2baGQ4KfZ%2by/LzXxHzIllSY6G5roLhBN7GwH4rGG8IJTiRbEWz33bNTxiLIkyMTmNvKE2a4lbjhSAdYT8xA6CmLEbNcZanY%2bLuIbQNWh%2bz2o3tptpFtt738KwSvlJ/C8DSOljFYkssaYbwiwXD0B/EUO4jJTuC6ohCT4Jrh5myqXsyYD8Mj8px2czHc0JsdCnE7j7VNcwSswTYsWNAniK662VLWlsE3HYO6/fvXFw/B8SiO82RLlKfSpJbcLyydexuL9CFdDVddjclNsunSvK60i096zemzWsNoCzdYSAo%2bNt63CrU0EuDa9ZTWtbA2oBYJszYF8AxjmMrKo0pS3U3H0m%2b4/Nc%2bfi8JnDX%2be800sIJ1KNqkvFnFo4gGKwoOzoim33EI3LaFagL92qx28KDa48PGH/AHpSQ842nSlKllOkXv076X31KMsrYa6a1zhz3HUHO2Hv4hhyHVMNBvVqXZQB8N//AGpfBQjMuNQ4sN4hpxWsuo30pG5I%2b1QeYyiQxyZGGMx2U9VGVrCvS%2b1EzgPh0RjB3pTQGvUqOwk9jaSLkeFyB6UaqVKSx0OtRc4QeeoVx03N/OsUr1i9MBOcrMWZsGy3H52N4gxETa4StV1q8kjc0C%2bIXtEttx3omUIiw8oFImyQPk8Uo7/P7VXrFcbnYpIcfmyXXnVm6luKKlH1Ncdd1KVckm1aVXGP3BkLfAfMj87Ps%2bDjD7ks4yyeYt5ZUpbiSVC5PbYq/FE/NnDx6MVy4rjrbKt%2beyL2Hcodn%2bqrFlbElYLmXDcRQopMZ9DhINjYHcfa9X3axRrC8IfnS3Erw9pkvlz/AACdX5FU3UqyOdmi%2bm91vGMoCWWcjTcXnJje%2bOSkjdaijShA71d/l212uMeNO8NpuS2suLS2YzUnUhYuHUkt6tY8Tf16dKmvBvN7eYoc2O6yyxMbWXwlpASFtqO2w7U9D6UCvajxHn8TWIwJIiwUp69qlE1zoK02pN5O%2bIOcZOuSxgMOT%2bN2W8bLTGKFeDzF7fxzqZUfBY6fuAooMutvtIdYcQ40sXStCgpKh4Eda%2beSX/l7rHapTlHPmO5YeBwjEnmG7/M0TqbV5oO1MZaOMvQ8C5WtbkEB3t31kJupw%2bVePMCHEFYBT206KUpN0kgHuO1VRWS1sbOJsQattkXMrDnA2DimJL5zcRoxXGyd1rQSEJPn8npVTnRqTUvyhmCUMsycvav5RUtMy1/1BBTby6H0qq%2bbqrlJdC/SVK%2b6Nb2bCdwkxpGC50juy1paYdQR3ITrO4Ph0t3VAeOeIe/cU8ac1agytLIPkLn/AGa6wUlLDbvalNqGU59UiTIecUpanHFKJUbk71j4ZY5Zi%2bnMb8e08YONi68v0eK123FOWAVKG9c4oKiUlRNulekQFLqSronpTmEnk821yPB2nDO8du//ABpUqzw3Za9jdf0U/wArbYkbd1KlVWr%2bVLs/Y06D6ivuvcm8hSvh6tz0PbQ1/sjypUqwcJ9UuyHfiLav8/wwPrHkK9E/R%2b4UqVO47nl3sf/Z' /%3e%3c/svg%3e"},"path":"/author/kumaravel/"}]},"previous":{"title":"Setup SonarQube Server for Maven Project","excerpt":"SonarQube is an automatic code review tool to detect bugs, vulnerabilities, and code smells in your code. It can integrate with your existing workflow to enable continuous code inspection across your project branches and pull requests.","image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.771f6be.3680a61f31f22caf39f0c4b0715fe471.png","size":{"width":560,"height":315},"sizes":"(max-width: 560px) 100vw, 560px","srcset":["/assets/static/cover.771f6be.3680a61f31f22caf39f0c4b0715fe471.png 560w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 560 315' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-48e6ae16271c87aa8f7bd8a3bd608a95'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-48e6ae16271c87aa8f7bd8a3bd608a95)' width='560' height='315' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAYAAAA5DDySAAAACXBIWXMAAAsSAAALEgHS3X78AAAHtElEQVRo3u1YWU9USRTu%2bOyDcV71UWMyjksyiYkaFpdIBBQVNwTXIC6jGI24IK6JiNEQN0BHVHYYnehEEQUBZV9Flr690yCivsyD/oFv7neg8NK2C5GOE%2b2HSt3aTtX56junzrkmm82Gn7mY/AD4AfAD4AfAl8Vqsw7U1g%2b1sRjHfjgArEph1R5U1D7YtnsC49HWNA0Wi0XarNn2BE3qbwBw1AEw3iwPbTyo026DZrGiU7OiS6879Npht3lVym634/Xr13C73SLH5XJJ2%2bl0SntI9mARkAe/1bjxPGq%2bJxNNnof2pOi3FB7aarXBoZtBZasF%2bVVm/FWrobBGQ3GThvuN2gAIXpTv6OjAmTNncPfuXfT19eHp06c4deoUqqurBZTe3l6ZZ7E5deXtsFFBm0MAdru70d3dLUpzDkHjGofDIf1GkzN5s8%2bBg1tlIRfxm7X6phAlgH2s2cfNlCz2V1VVDVCdB9UPY7Y7UdGqIUcHoqBawz8NGkqaLMNAI81fvnyJO3fuwGQyISwsDO/fv8fcuXOlXVZWJuAUFhaivdMMt7kONvNzWF09cGjN6OtxorS0DOXl5QJSe3s7GhoaZF1zc7MA%2bREDjCBQ6ZqaGvnmgufPnwsgrFk4j7eg7PHFixdSU1luRsXNZrPIOXjwIB4%2bfDgkt6mxAX1uF8z6LeXrALBUtJKq1iEfwLVv3rzByZMnMWbMGAHg9u3bGDt2LKZPn45Hjx5h9erVWBIWiqCQcLizjsFZVgStvhb//hmL5JOHsTRiOaZN%2bw15eXlYvnw5FixYgMmTJ2PHjh148uSJnF3pbDI6HFJt165dWLJkCdLS0rBo0SJERkYiPj4eAQEBCAoKQnZ2tvRR8M6dO6WP1Dxy5IjUx44dE5QvX76MzZs34/Dhwzhx4gQuXLggctLSM9Df14uWDg2ZlWaUNuv2bbcNOUqe4%2b3bt1ixYgWWLl2K2bNnY86cObJnREQEHjx4gD179iBqzRr8HhwILTkVbQkn0Bkdh/KkRPwycSLidR2Cg4NF4ZkzZ%2bqMKMXatWtFt3fv3gnI6sKHACBFe3p6cPbsWYSEhGDSpEmiEDcbP3489u7di7i4OAEiJiZGR3gaZs2ahaNHj4rSpBtpOX/%2bfGEQAdmwYYPQf9%2b%2bfaLI1atXkZGRAYfTpSttRZHuCxradcr3uJGXk4sifT3lEIQpU6bg0qVLGDdunChPMNevXy%2b3GRsbi6CAQERGrUFfdStyf41B0x8p%2bPvePUyYMEHOvXv3bly5ckXkkMFTp07F9evX5ZK9MkDZPDdduHAhEhISsGzZMlGWyp8%2bfRopKSlYvHix3MTKlSsRHR2NnJwcoSjpvmnTJqEuv3nzrAlEcnIyzp07J2M0HwLQrQNQ0kQALHC7HGJuLDwsTWn//v3STkxMFEadP39e9qEsAkA2Zedk6/N7cD%2b9GB1tZrh08zp%2b/Lgwh8qSLWQfZfISGhsbRUej0x8GAG%2brpaVFbJ12yJp0oQCixkIBbW1t0q/eaY63traK2ZSUlIgCXV1dIpMOiHPoJKk8x5SzHCi2j5wsz8Sb4jzW3JPspAw6SLKkv79/wNNruhN12PW5A88g57969UrmcR1r62C/0Ul7jQOMB6FyysMbF6k5xnVUkJupp4nfakx9K6A%2bPoQV3p5i5WRVrd52VYxBks3jFVFjqq18i7fI85NxwEhiAqMf%2bdr5Q55/FPb98G37ynnW0Y0Ev7SJPxv0A/CDAPA5ex2JLzH6jE%2bZzqfGv7SPzwAYltXpnl09jcrxGT20yic4T83x9OAqMVHemW2jd%2bdaNe4pw9jmPsrLe2afPmEAD8qAora2Vt5blQTxnWbhU8jDc5yBDN9h9rNmRsZvrmMswQBHvc%2bMPziHhTKbmpokolR9lKvkq8J53Kezs1NkcnykTBgRA4gwlWBMzRD45s2bEnklJSXhnh6GXrt2DRcvXpQAitEa09nMzEyJylJTU1FQUID09HQJhxldMjrj%2bK1btySKZFTJiJFgMIJkNHjjxg3JKyiX%2b1GWaj979gxbtmyRfdhP2QTWGFCNKgCK2oz9GZcHBgZKOLxx40YJP8PDwxEaGiqp6KFDhyRr4zhDalXPmDFDkqgDBw5IbsGQmmtXrVol65m88B8AkyeOMSznPgzFuWdUVJQkOpRHhhH8bdu2Yd68eQKYSuV9BgDRrayslLSSKTBpyjYzLt5Kbm6uUJNpa0VFhYzxpmijpCvXUQZpyxvnOBVm2sw8v76%2bXkyC/QyjGWLX1dXJGWgWbDO3pxnyPASB56Bc3r63cHdUn0EKpxmwUFFVaJNEn9/q/wFvmjfHhIb0p6LMFWgq%2bfn5yMrKEqW3b98uqSvzd86jWdBMCCbX0AyY1NC3qLxAOT/lLNUfH585Qc9/fd6Kir15ON4kqc3/BSqNpXmsW7dO6ErzYM5PBbdu3SqZJoGgTTN3V2uZCtNXcI7xxTE%2bq8P%2bEfrKCY4kPiANmQ0%2bfvxYqEl6FxUVCXVJZ6apHKOvIIVpRgSNNenM1JfOkGZFUyouLpZvms1IKf5dIkF1QGUmrNUzqCisxkhb9adXjalsk2alnk7WvsgxTL5S3jM4%2blzQZKS08dszAPJFovW/ygW%2bR1bpT4b8APgB%2bLkB%2bA9xTG16JxfnIAAAAABJRU5ErkJggg==' /%3e%3c/svg%3e"},"path":"/blogs/setup-sonar-qube-server-for-maven-project/","timeToRead":2,"category":{"id":"Blog","title":"Blog"},"author":[{"id":"kumaravel","name":"Kumaravel","image":{"type":"image","mimeType":"image/png","src":"/assets/static/kumaravel.f26c338.62b7462775409c8a2ece49d93896682d.png","size":{"width":50,"height":64},"sizes":"(max-width: 50px) 100vw, 50px","srcset":["/assets/static/kumaravel.f26c338.62b7462775409c8a2ece49d93896682d.png 50w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 50 64' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-acb62cea0c5ba9796bef793e28a4ac1c'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-acb62cea0c5ba9796bef793e28a4ac1c)' width='50' height='64' xlink:href='data:image/png%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCABSAEADASIAAhEBAxEB/8QAHQAAAQQDAQEAAAAAAAAAAAAABwAEBggBAgUDCf/EADcQAAEDAgQDBQcCBgMAAAAAAAECAwQAEQUGEiEHEzFBUWFxgQgUFSIykaFCgiMkM0NisVJywf/EABoBAAIDAQEAAAAAAAAAAAAAAAEFAAMEAgb/xAApEQACAgECBAQHAAAAAAAAAAAAAQIDEQQxBSFBcQYSMrEiMzRhgZHB/9oADAMBAAIRAxEAPwC1NKlSJtUIauLS2hSlqCUpFySbAChpmjjNlrBZCmIynsSdTsoxraB%2b47H0vQ29pDiBJ%2bLKy5hzy24ce3vYSbc5wgHSf8QCNu01X5%2ba%2br5krukfpA6UMhLcYJx5y1LeDeKMy8MCiAl5Y5jfqU7j1FqLMSSzLjNSIrqHmHEhSHEKCkqB7QRXznkv%2b5q1P35bqAdj0Pb96M3s6cW3MKxSFlLExzMLku8uM8rZTCldAe9JO3heiAtxSpA0qhBVg1revKWp0RHix/WCFFH/AGtt%2baGQ4KfZ%2by/LzXxHzIllSY6G5roLhBN7GwH4rGG8IJTiRbEWz33bNTxiLIkyMTmNvKE2a4lbjhSAdYT8xA6CmLEbNcZanY%2bLuIbQNWh%2bz2o3tptpFtt738KwSvlJ/C8DSOljFYkssaYbwiwXD0B/EUO4jJTuC6ohCT4Jrh5myqXsyYD8Mj8px2czHc0JsdCnE7j7VNcwSswTYsWNAniK662VLWlsE3HYO6/fvXFw/B8SiO82RLlKfSpJbcLyydexuL9CFdDVddjclNsunSvK60i096zemzWsNoCzdYSAo%2bNt63CrU0EuDa9ZTWtbA2oBYJszYF8AxjmMrKo0pS3U3H0m%2b4/Nc%2bfi8JnDX%2be800sIJ1KNqkvFnFo4gGKwoOzoim33EI3LaFagL92qx28KDa48PGH/AHpSQ842nSlKllOkXv076X31KMsrYa6a1zhz3HUHO2Hv4hhyHVMNBvVqXZQB8N//AGpfBQjMuNQ4sN4hpxWsuo30pG5I%2b1QeYyiQxyZGGMx2U9VGVrCvS%2b1EzgPh0RjB3pTQGvUqOwk9jaSLkeFyB6UaqVKSx0OtRc4QeeoVx03N/OsUr1i9MBOcrMWZsGy3H52N4gxETa4StV1q8kjc0C%2bIXtEttx3omUIiw8oFImyQPk8Uo7/P7VXrFcbnYpIcfmyXXnVm6luKKlH1Ncdd1KVckm1aVXGP3BkLfAfMj87Ps%2bDjD7ks4yyeYt5ZUpbiSVC5PbYq/FE/NnDx6MVy4rjrbKt%2beyL2Hcodn%2bqrFlbElYLmXDcRQopMZ9DhINjYHcfa9X3axRrC8IfnS3Erw9pkvlz/AACdX5FU3UqyOdmi%2bm91vGMoCWWcjTcXnJje%2bOSkjdaijShA71d/l212uMeNO8NpuS2suLS2YzUnUhYuHUkt6tY8Tf16dKmvBvN7eYoc2O6yyxMbWXwlpASFtqO2w7U9D6UCvajxHn8TWIwJIiwUp69qlE1zoK02pN5O%2bIOcZOuSxgMOT%2bN2W8bLTGKFeDzF7fxzqZUfBY6fuAooMutvtIdYcQ40sXStCgpKh4Eda%2beSX/l7rHapTlHPmO5YeBwjEnmG7/M0TqbV5oO1MZaOMvQ8C5WtbkEB3t31kJupw%2bVePMCHEFYBT206KUpN0kgHuO1VRWS1sbOJsQattkXMrDnA2DimJL5zcRoxXGyd1rQSEJPn8npVTnRqTUvyhmCUMsycvav5RUtMy1/1BBTby6H0qq%2bbqrlJdC/SVK%2b6Nb2bCdwkxpGC50juy1paYdQR3ITrO4Ph0t3VAeOeIe/cU8ac1agytLIPkLn/AGa6wUlLDbvalNqGU59UiTIecUpanHFKJUbk71j4ZY5Zi%2bnMb8e08YONi68v0eK123FOWAVKG9c4oKiUlRNulekQFLqSronpTmEnk821yPB2nDO8du//ABpUqzw3Za9jdf0U/wArbYkbd1KlVWr%2bVLs/Y06D6ivuvcm8hSvh6tz0PbQ1/sjypUqwcJ9UuyHfiLav8/wwPrHkK9E/R%2b4UqVO47nl3sf/Z' /%3e%3c/svg%3e"},"path":"/author/kumaravel/"}]},"next":{"title":"Notepad++ Macros- Solution for repeated actions","excerpt":"Know about Solution for repeated actions using Notepad++ Macros.","image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.771f6be.65d68ab737f542edb1ffbc406d0cc313.png","size":{"width":560,"height":315},"sizes":"(max-width: 560px) 100vw, 560px","srcset":["/assets/static/cover.771f6be.65d68ab737f542edb1ffbc406d0cc313.png 560w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 560 315' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-bce9565e87fca50c4d56fc3dff8ecede'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-bce9565e87fca50c4d56fc3dff8ecede)' width='560' height='315' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAYAAAA5DDySAAAACXBIWXMAAAsSAAALEgHS3X78AAAHq0lEQVRo3u1ZeUxVZxYnJpr%2b4VhbR%2bDtj/tYCk9BZXnAYykKZXNkkVqsGchAoYpGJrYdaOiCOlM7dmpSaogEGIfFh6g0IIhVQKi1gKlLcCmhwIgRZBVE0MbR9Dff%2bewlF4MFMzMJZN5NTu53zz33e9/5nXN%2b57v3WdjY2OD/WSzMAJgBMANgBsAMwP9ItFrtlOM5A8DzLPppW/FazUTzy3g2gjAjAARBmFak9uJZo9VgmUYNBwkIcwYAqTMymWxKkcvl/KxQKKDT6SZHmTmv1tkjJXwdXO1soZxrAFBUlUolXF1dkZeXD5OpBIcPl%2bLQIROKi00oKipGYWER9u/PRlDQa1i6dOlEJgiCDaxlCqwLNuCdP74FmUIFYa6RIDlDkfXx8cHY2Dikx89MHj8GHj76GWPjP%2bG7xmakpGyFlZUVzwAdA8BKIeBIxhJsXKPAUpkN02nnFgeIAHh5e6PjZjeGRsfROzSCfpI7d9E3OILbA8NMRnD1hx/R3nkTH2fugpbVvJVcQGSAEhUfvgiFUpxT%2b9wd4lnE%2bt8k62kB8PY2oqu7F8Nj93FndIyfB0fuPZHhMQwMjaJ/8C56B%2b4yMO7i1Vf98ZuXFChK%2by3e/p0MS6yFSdGXkqaUPKfSSa%2bfXtvT96ea61m2UhCmBcBo9MGtnl7c/%2blfGOgbxfVrHWhsPI9LF1vQ3tGFoZExlg3D6OkfxMjYPbweGw8v5yX4evfLjAjFH5tMqMQtdC0lUNKJpKrRaLiO7K2traFWqydsRTuyUalUXEdjOtO1dCy9T8/RXDSWgjB9BhiNuHX7NnpvD%2bLT%2bk%2bw89t0nGmoQfWZCjSer8fAcCeL/jV0913C6P0r2Pbu%2b9ib8ALSY%2bV4yepJ9Gk%2bWoCLiwuampqwadMmLF68GAcOHEBubi4WLlyI9evXo7m5GaWlpdDr9ZxP6JnCwkJUVlaitrYWnp6eyMzM5HOQ/vTp08jIyOAEnJaWhhMnTqCkpATHjx/n5O3u7o6jR49yXV1dHfbs2cNBea4S8PTyYml%2bFd%2b3l%2bHj5kR8eSMVH5Vvxk5TAto6ChgflOJWXwEDIAdD93JRWf4BytJegN5BgFrzpPZpLooaOUDH4OAg6yaH%2bJgci46ORldXF5KSknDkyBGuc3JywrFjx3D27FnuSHZ2NlJTU1FdXY2%2bvj4ezeTkZDx69IgRcAqfi%2b7Tb7W2trJOVYyqqir09PRwP2JiYljnKuJrIGDFcvh1ANiivXyMuHYlD/sPbEbKe8H4cHcE3t8ZjE8/24Cab7ajvTcF/%2bxPQtut36Nt8A8YueSNP0W9jCUyHWx/qX0RTA8PD77gkydPor6%2bHi0tLaioqOCO9vf3c9v4%2bHhuQxGlIyIiAosWLeJRtrCw4NnQ2dnJU9lkMqG7uxvbt2/nths2bMCCBQtYiTby3wgPD8e5c%2beQk5PDgU1MTOTASTli2gwweBlx/vpWHKoKxu4sf%2bzJDkBJdSC%2b%2bjYQTV1huDIcgpY7waj83h9N3YGoLfDBKr0tVGrtRO8X56JI0pGeno7Y2NiJ1D548CDX5%2bXloaamhrXYx3yxHR0dyMrK4gCQc2FhYSgrK8ODBw9w%2bfJlPHz4kOuoVdMRFRXFQaJSamhoQGBgIM8KKqkdO3Zwm9DQ0EkgTLMRYov28Mbp9vU4fy8An5i8kPkPD%2bw1ueGzEnd8UeGB/VWe%2bLzMgIxsV%2bw66IK82jdg8DFAwTZCUlYmANzc3PgiyLl58%2bZxZ8vLy1FQUIC2tjbMnz8fISEh3MHIyEg4OzvzdKY6vnHjBuLi4vj4woUL8PX1xfj4OC5evAiDwcAzieqceKW9vR0bN27Eli1bOIj79u3DqVOnOOCOjo4TRDgjANzcPVF0NRymmwYUdxpxuM%2bI9/JdkPhnPbZlOSP582VI/tsyJPxVj4/OrMCXnX4Iiw6EzFLO658AEIWY3c/Pj9c3MTsBQmS1cuVKeDGuoYU5ODjwiNJCKVJ0b%2b3atdxhS0tLbk%2b2RJL0fFBQEOzt7fncBB6lPdmKHYVs6XnKFLIjvbQ1PvtlSHjC3K5uBuxqXI3MVhd80LIKGddXIumr5dhU6IS4Mie8WaxHQp0LEr5bjvhGPba0eiBqWyjkloxodMIECNI2SM6LnUEUyhD%2bAsVAENuc2B7JcXpOvJa2TrG10dwEConopEi%2bop7spM7PEAB3xLIUj6yzQ1SDHutIvtEjvMEJoewcVKNHwClH%2bH79Crwq7OF5wgGvpa2GjZz1cUE75ZultDSkG5lfsxHvTzWWZu10uhnvBElUKiVWsZTzK3TF8lINnEt1cCzRwI6NhSI1tKUsuodZ1P7O3vzymX2%2bAOtcJVb/JRh622VQa9UTP6qdpd8Eps0AqrMV%2bR6Q59jAvsAFK4qNcM/zhzvrCIYv1sB3bwjWZIYj8N21CH0nGsGbIxAYEwpbne2s/Qo04wxQs12T8woXxKS%2bicitbyA8LgqrI4PhtyYAvkZ/%2bHj4wXW5O14RHGGnsYOtSgeBvfyo5apZG/Hn/iCi0bD0VTCSkbM0l6mgZO2NNkgKBROlHEq1kn/50dgwGyI8qnvBZk44P/NvgoJUhMkygy9Kcx%2bA/%2bD92/y/gBkAMwBmAMwAmAEwAzBr5d/ytFOkHmM/lwAAAABJRU5ErkJggg==' /%3e%3c/svg%3e"},"path":"/blogs/notepad-macros-solution-for-repeated-actions/","timeToRead":2,"category":{"id":"Blog","title":"Blog"},"author":[{"id":"kumaravel","name":"Kumaravel","image":{"type":"image","mimeType":"image/png","src":"/assets/static/kumaravel.f26c338.62b7462775409c8a2ece49d93896682d.png","size":{"width":50,"height":64},"sizes":"(max-width: 50px) 100vw, 50px","srcset":["/assets/static/kumaravel.f26c338.62b7462775409c8a2ece49d93896682d.png 50w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 50 64' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-acb62cea0c5ba9796bef793e28a4ac1c'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-acb62cea0c5ba9796bef793e28a4ac1c)' width='50' height='64' xlink:href='data:image/png%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCABSAEADASIAAhEBAxEB/8QAHQAAAQQDAQEAAAAAAAAAAAAABwAEBggBAgUDCf/EADcQAAEDAgQDBQcCBgMAAAAAAAECAwQAEQUGEiEHEzFBUWFxgQgUFSIykaFCgiMkM0NisVJywf/EABoBAAIDAQEAAAAAAAAAAAAAAAEFAAMEAgb/xAApEQACAgECBAQHAAAAAAAAAAAAAQIDEQQxBSFBcQYSMrEiMzRhgZHB/9oADAMBAAIRAxEAPwC1NKlSJtUIauLS2hSlqCUpFySbAChpmjjNlrBZCmIynsSdTsoxraB%2b47H0vQ29pDiBJ%2bLKy5hzy24ce3vYSbc5wgHSf8QCNu01X5%2ba%2br5krukfpA6UMhLcYJx5y1LeDeKMy8MCiAl5Y5jfqU7j1FqLMSSzLjNSIrqHmHEhSHEKCkqB7QRXznkv%2b5q1P35bqAdj0Pb96M3s6cW3MKxSFlLExzMLku8uM8rZTCldAe9JO3heiAtxSpA0qhBVg1revKWp0RHix/WCFFH/AGtt%2baGQ4KfZ%2by/LzXxHzIllSY6G5roLhBN7GwH4rGG8IJTiRbEWz33bNTxiLIkyMTmNvKE2a4lbjhSAdYT8xA6CmLEbNcZanY%2bLuIbQNWh%2bz2o3tptpFtt738KwSvlJ/C8DSOljFYkssaYbwiwXD0B/EUO4jJTuC6ohCT4Jrh5myqXsyYD8Mj8px2czHc0JsdCnE7j7VNcwSswTYsWNAniK662VLWlsE3HYO6/fvXFw/B8SiO82RLlKfSpJbcLyydexuL9CFdDVddjclNsunSvK60i096zemzWsNoCzdYSAo%2bNt63CrU0EuDa9ZTWtbA2oBYJszYF8AxjmMrKo0pS3U3H0m%2b4/Nc%2bfi8JnDX%2be800sIJ1KNqkvFnFo4gGKwoOzoim33EI3LaFagL92qx28KDa48PGH/AHpSQ842nSlKllOkXv076X31KMsrYa6a1zhz3HUHO2Hv4hhyHVMNBvVqXZQB8N//AGpfBQjMuNQ4sN4hpxWsuo30pG5I%2b1QeYyiQxyZGGMx2U9VGVrCvS%2b1EzgPh0RjB3pTQGvUqOwk9jaSLkeFyB6UaqVKSx0OtRc4QeeoVx03N/OsUr1i9MBOcrMWZsGy3H52N4gxETa4StV1q8kjc0C%2bIXtEttx3omUIiw8oFImyQPk8Uo7/P7VXrFcbnYpIcfmyXXnVm6luKKlH1Ncdd1KVckm1aVXGP3BkLfAfMj87Ps%2bDjD7ks4yyeYt5ZUpbiSVC5PbYq/FE/NnDx6MVy4rjrbKt%2beyL2Hcodn%2bqrFlbElYLmXDcRQopMZ9DhINjYHcfa9X3axRrC8IfnS3Erw9pkvlz/AACdX5FU3UqyOdmi%2bm91vGMoCWWcjTcXnJje%2bOSkjdaijShA71d/l212uMeNO8NpuS2suLS2YzUnUhYuHUkt6tY8Tf16dKmvBvN7eYoc2O6yyxMbWXwlpASFtqO2w7U9D6UCvajxHn8TWIwJIiwUp69qlE1zoK02pN5O%2bIOcZOuSxgMOT%2bN2W8bLTGKFeDzF7fxzqZUfBY6fuAooMutvtIdYcQ40sXStCgpKh4Eda%2beSX/l7rHapTlHPmO5YeBwjEnmG7/M0TqbV5oO1MZaOMvQ8C5WtbkEB3t31kJupw%2bVePMCHEFYBT206KUpN0kgHuO1VRWS1sbOJsQattkXMrDnA2DimJL5zcRoxXGyd1rQSEJPn8npVTnRqTUvyhmCUMsycvav5RUtMy1/1BBTby6H0qq%2bbqrlJdC/SVK%2b6Nb2bCdwkxpGC50juy1paYdQR3ITrO4Ph0t3VAeOeIe/cU8ac1agytLIPkLn/AGa6wUlLDbvalNqGU59UiTIecUpanHFKJUbk71j4ZY5Zi%2bnMb8e08YONi68v0eK123FOWAVKG9c4oKiUlRNulekQFLqSronpTmEnk821yPB2nDO8du//ABpUqzw3Za9jdf0U/wArbYkbd1KlVWr%2bVLs/Y06D6ivuvcm8hSvh6tz0PbQ1/sjypUqwcJ9UuyHfiLav8/wwPrHkK9E/R%2b4UqVO47nl3sf/Z' /%3e%3c/svg%3e"},"path":"/author/kumaravel/"}]}},"context":{"previousElement":"5ab9b4a67a8b2c09d5496e9c0c9b2990","nextElement":"fe6920f0439e32852d21085fea269386","id":"a0e95e836497dccf407bff24d287a81d"}}